# This make file lists all the system components used by the latest
# tools in one flat list, making no attempt to sort out the build
# order automatically.

# Note that the order in which the modules are listed is critical!
# Note also that this simplistic build scheme takes the traditional
# built-too-much approach: building the default target all will
# rebuild everything.  So if you want to be sure all the prerequisite
# to your tool are rebuilt, you should do a make all.  On the other
# hand, if you want to rebuild just the module you are working on,
# just do a make in that subdirectory.

MODULES = \
	src/asf \
	src/asf_meta \
	src/asf_lt \
	src/asf_geolib \
	src/asf_odl \
	src/asf_fft \
	src/libasf_proj \
	src/libasf_raster \
	src/libasf_reporting \
	src/asf_export \
	src/asf_import \
	src/asf_geocode \
	src/asf_terrain_correct \
	src/asf_convert \
	@ASF_GUI@
# src_x/sarview


all: external_libs
	$(foreach MODULE, $(MODULES), $(MAKE) -C $(MODULE) &&) true

install: all
	mkdir -p @BINDIR@ @prefix@/lib @SHAREDIR@
	cp bin/* @BINDIR@
	cp -R lib/* @prefix@/lib
	cp -R share/* @SHAREDIR@
#	chmod 755 @BINDIR@/*
#	chmod -R 644 @SHAREDIR@/*

external_libs:
	$(MAKE) -C external
	cp -R external/lib/* lib
	chmod -R ug+w lib
	cp -R external/include/* include
	chmod -R ug+w include

clean:
	rm -rf bin/* lib/*

release:
	cd make_support; make; ./makemake @sys@; cd ..

oldtools:
	cd make_support; make; ./makemake @sys@; cd ..
	make --makefile=Makefile.old
