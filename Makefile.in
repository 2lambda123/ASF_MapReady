# This make file lists all the system components used by the latest
# tools in one flat list, making no attempt to sort out the build
# order automatically.

# Note that the order in which the modules are listed is critical!
# Note also that this simplistic build scheme takes the traditional
# built-too-much approach: building the default target all will
# rebuild everything.  So if you want to be sure all the prerequisite
# to your tool are rebuilt, you should do a make all.  On the other
# hand, if you want to rebuild just the module you are working on,
# just do a make in that subdirectory.

MAPREADY_MODULES = \
	src/asf \
	src/libasf_proj \
	src/asf_meta \
	src/asf_fft \
	src/libasf_raster \
	src/libasf_sar \
	src/libasf_import \
	src/libasf_vector \
	src/libasf_geocode \
	src/libasf_export \
	src/libasf_ardop \
	src/ardop \
	src/libasf_terrcorr \
	src/libasf_insar \
	src/asf_import \
	src/asf_export \
	src/asf_geocode \
	src/asf_terrcorr \
	src/asf_calpol \
	src/libasf_convert \
	src/asf_convert \
	src/refine_geolocation \
	src/shift_geolocation \
	src/fftMatch \
	src/trim \
	src/sr2gr \
	src/gr2sr \
	src/to_sr \
	src/deskew \
	src/metadata \
	src/resample \
	src/fill_holes \
	src/meta2envi \
	src/mosaic \
	src/create_thumbs \
	src/llh2ls \
	src/smooth \
	src/farcorr \
	src/convert2vector \
	src/diffmeta \
	src/diffimage \
	src/sgpsdp \
	src/plan \
	src/metadata_gui \
	src/asf_view \
	src/convert2vector_gui \
	@ASF_GUI@

STP_MODULES = \
	src/asf \
	src/libasf_proj \
	src/asf_meta \
	src/asf_fft \
	src/libasf_raster \
	src/libasf_sar \
	src/libasf_import \
	src/libasf_vector \
	src/libasf_geocode \
	src/libasf_export \
	src/libasf_ardop \
	src/libasf_terrcorr \
	src/libasf_insar \
	src/metadata \
	src/asf_import \
	src/asf_export \
	src/ardop \
	src/sgpsdp \
	src/plan \
	src/asf_view \
	src/stp

AP_MODULES = \
	src/asf \
	src/libasf_proj \
	src/asf_meta \
	src/libasf_ardop \
	src/asf_fft \
	src/libasf_raster \
	src/libasf_import \
	src/libasf_vector \
	src/libasf_sar \
	src/libasf_geocode \
	src/libasf_export \
	src/libasf_terrcorr \
	src/libasf_convert \
	src/metadata \
	src/metadata_gui \
	src/sgpsdp \
	src/plan \
	src/asf_view

REQ_MODULES = \
	src/asf \
	src/libasf_proj \
	src/libasf_raster \
	src/asf_meta \
	src/metadata \
	src/req

C2V_MODULES = \
	src/asf \
	src/libasf_proj \
	src/asf_meta \
	src/libasf_ardop \
	src/asf_fft \
	src/sgpsdp \
	src/libasf_raster \
	src/libasf_import \
	src/libasf_vector \
	src/libasf_sar \
	src/libasf_geocode \
	src/libasf_export \
	src/libasf_terrcorr \
	src/libasf_insar \
	src/libasf_convert \
	src/convert2vector \
	src/convert2vector_gui

JPL_MODULES = \
	contrib \
	src/byteswap

IGNORED_INCLUDES = \
	include/ardop_defs.h \
	include/asf_baseline.h \
	include/asf_complex.h \
	include/asf_convert.h \
	include/asf_export.h \
	inlcude/asf_geocode.h \
	include/asf_glib.h \
	include/asf.h \
	include/asf_import.h \
	include/asf_insar.h \
	include/asf_jpeg.h \
	include/asf_meta.h \
	include/asf_raster.h \
	include/asf_sar.h \
	include/asf_simulation.h \
	include/asf_terrcorr.h \
	include/asf_tiff.h \
	include/asf_vector.h \
	include/banded_float_image.h \
	include/calibrate.h \
	include/caplib.h \
	include/date.h \
	include/dateUtil.h \
	include/float_image.h \
	include/frame_calc.h \
	include/get_ceos_names.h \
	include/get_stf_names.h \
	include/ips.h \
	include/libasf_proj.h \
	include/matrix.h \
	include/metadisplay.h \
	include/meta_init_stVec.h \
	include/meta_project.h \
	include/plan.h \
	include/plan_internal.h \
	include/polygon.h \
	include/poly.h \
	include/read_signal.h \
	include/sgpsdp.h \
	include/spheroids.h \
	include/uint8_image.h \
	include/vector.h

S_LIBDIR   = lib
S_BINDIR   = bin
S_SHAREDIR = share/asf_tools
S_DOCDIR   = $(S_SHAREDIR)/doc

VERSION_MAPREADY = $(shell awk -F '"' '$$1 ~ /define MAPREADY_VERSION_STRING/ {print $$2}' include/asf_version.h)
VERSION_STP = $(shell awk -F '"' '$$1 ~ /define STP_VERSION_STRING/ {print $$2}' include/asf_version.h)
VERSION_AP = $(shell awk -F '"' '$$1 ~ /define AP_VERSION_STRING/ {print $$2}' include/asf_version.h)
VERSION_REQ = $(shell awk -F '"' '$$1 ~ /define REQ_VERSION_STRING/ {print $$2}' include/asf_version.h)
VERSION_C2V = $(shell awk -F '"' '$$1 ~ /define C2V_VERSION_STRING/ {print $$2}' include/asf_version.h)
VERSION_JPL = $(shell awk -F '"' '$$1 ~ /define JPL_VERSION_STRING/ {print $$2}' include/asf_version.h)

# Build the MapReady package by default
default: mapready

# MapReady Package
mapready: mkdirs_for_build external_libs
	echo BUILD_PKG = -D_PKG_MAPREADY > make_support/build_pkg.mk
	cp doc/mapready_manual.pdf $(S_DOCDIR)
	cp doc/mapready-version_history.txt $(S_DOCDIR)
	cp LICENSE.txt $(S_SHAREDIR)
	echo $(VERSION_MAPREADY) > $(S_SHAREDIR)/mapready_version.txt
	echo "#define SVN_REV \"`svn info|grep Revision|cut -c11-`\"">include/svn_rev.h
	$(foreach MODULE, $(MAPREADY_MODULES), $(MAKE) -C $(MODULE) &&) true
	@ echo ""
	@ echo "  XXXXXXXXXXXX ASF MapReady Package Compiled! XXXXXXXXXXX"
	@ echo ""

# SAR Training Processor Package
stp: mkdirs_for_build external_libs
	echo BUILD_PKG = -D_PKG_STP > make_support/build_pkg.mk
	cp doc/SAR_training_processor.pdf $(S_DOCDIR)
	cp doc/stp-version_history.txt $(S_DOCDIR)
	cp LICENSE.txt $(S_SHAREDIR)
	echo $(VERSION_STP) > $(S_SHAREDIR)/stp_version.txt
	echo "#define SVN_REV \"`svn info|grep Revision|cut -c11-`\"">include/svn_rev.h
	$(foreach MODULE, $(STP_MODULES), $(MAKE) -C $(MODULE) &&) true
	@ echo ""
	@ echo "  XXXXXXXXXXXX ASF SAR Training Processor Package Compiled! XXXXXXXXXXX"
	@ echo ""

# Acquisition Request Planner Package
ap: mkdirs_for_build external_libs
	echo BUILD_PKG = -D_PKG_AP > make_support/build_pkg.mk
	cp LICENSE.txt $(S_SHAREDIR)
	echo $(VERSION_AP) > $(S_SHAREDIR)/acquisitionplanner_version.txt
	echo "#define SVN_REV \"`svn info|grep Revision|cut -c11-`\"">include/svn_rev.h
	$(foreach MODULE, $(AP_MODULES), $(MAKE) -C $(MODULE) &&) true
	@ echo ""
	@ echo "  XXXXXXXXXXXX ASF Acquisition Planning Package Compiled! XXXXXXXXXXX"
	@ echo ""

# Request Generator Package
req: mkdirs_for_build external_libs
	echo BUILD_PKG = -D_PKG_REQ > make_support/build_pkg.mk
	cp LICENSE.txt $(S_SHAREDIR)
	echo $(VERSION_REQ) > $(S_SHAREDIR)/req_version.txt
	echo "#define SVN_REV \"`svn info|grep Revision|cut -c11-`\"">include/svn_rev.h
	$(foreach MODULE, $(REQ_MODULES), $(MAKE) -C $(MODULE) &&) true
	@ echo ""
	@ echo "  XXXXXXXXXXXX ASF Request Generator Compiled! XXXXXXXXXXX"
	@ echo ""

# Convert To Vector Package
c2v: mkdirs_for_build external_libs
	echo BUILD_PKG = -D_PKG_C2V > make_support/build_pkg.mk
	cp LICENSE.txt $(S_SHAREDIR)
	echo $(VERSION_C2V) > $(S_SHAREDIR)/converttovector_version.txt
	echo "#define SVN_REV \"`svn info|grep Revision|cut -c11-`\"">include/svn_rev.h
	$(foreach MODULE, $(C2V_MODULES), $(MAKE) -C $(MODULE) &&) true
	@ echo ""
	@ echo "  XXXXXXXXXXXX Convert To Vector Compiled! XXXXXXXXXXX"
	@ echo ""

# JPL Mosaic Suite
jpl: mkdirs_for_build
	echo BUILD_PKG = -D_PKG_JPL> make_support/build_pkg.mk
	cp LICENSE.txt $(S_SHAREDIR)
	echo $(VERSION_C2V) > $(S_SHAREDIR)/jpl_version.txt
	$(foreach MODULE, $(C2V_MODULES), $(MAKE) -C $(MODULE) &&) true
	@ echo ""
	@ echo "  XXXXXXXXXXXX Convert To Vector Compiled! XXXXXXXXXXX"
	@ echo ""

# Build using our old system
oldtools: mkdirs_for_build
	cd make_support; $(MAKE); ./makemake @sys@; cd ..
	$(MAKE) --makefile=Makefile.old

# make everything!
all: mapready oldtools req ap stp

# This should install any & all package(s) that have been built
install: 
	mkdir -p "@BINDIR@" "@prefix@"/lib "@SHAREDIR@"
	cp -R $(S_BINDIR)/* "@BINDIR@"
	cp -R $(S_LIBDIR)/* "@prefix@"/lib
	cp -R $(S_SHAREDIR)/* "@SHAREDIR@"
	chmod 755 "@BINDIR@"/*
	if [ -d @SHAREDIR@/projections ]; then \
		chmod a+x "@SHAREDIR@"/projections ; \
		chmod a+x "@SHAREDIR@"/projections/* ; \
	fi
	if [ -d @SHAREDIR@/asf_mapready ]; then \
		chmod a+x "@SHAREDIR@"/asf_mapready ; \
	fi
	if [ -d @SHAREDIR@/asf_mapready ]; then \
		chmod a+x "@SHAREDIR@"/proj ; \
	fi
	chmod -R a+r "@SHAREDIR@"
	chmod -R ug+w "@SHAREDIR@"

# Libraries written by non-ASF parties
external_libs: mkdirs_for_build
	$(MAKE) -C external
	-cp -R external/lib/* $(S_LIBDIR)
	-chmod -R ug+w $(S_LIBDIR)
	-cp -R external/include/* include
	-chmod -R ug+w include
	-cp -R external/share/* $(S_SHAREDIR)
	-chmod -R ug+w share

# Prep the directory tree for the build
mkdirs_for_build:
	mkdir -p $(S_LIBDIR)
	mkdir -p $(S_BINDIR)
	mkdir -p $(S_DOCDIR)
	mkdir -p $(S_SHAREDIR)
	mkdir -p man/cat1
	mkdir -p man/man1

clean:
	rm -rf $(S_LIBDIR)
	rm -rf $(S_BINDIR)
	rm -rf $(S_DOCDIR)
	rm -rf $(S_SHAREDIR)
	rm -rf share
	rm -rf man
	-rm -rf $(IGNORED_INCLUDES)
	$(foreach MODULE, $(MAPREADY_MODULES) $(STP_MODULES) $(AP_MODULES) $(C2V_MODULES) $(JPL_MODULES), \
		$(MAKE) clean -C $(MODULE) &&) true

# Internal prep for release builds
release:
	cd make_support; $(MAKE); ./makemake @sys@; cd ..
