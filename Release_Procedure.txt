
The User Tool Development Group's Release Procedure Instructions:
=================================================================

IMPORTANT NOTE: At this time, ALL Linux rpm builds should occur
on dq.asf.alaska.edu, not on some other RedHat or CentOS machine.
This is because the configure script, if re-generated, may differ
and the docbook2text tool used to create the MapReady GUI's help
file creates a text file full of HTML rather than plain text
when run on other machines.  This will be fixed in the future,
but for now ...dq.asf.alaska.edu is king for builds.

MapReady v2.x RPM Build Procedure:
----------------------------------
Note: The following example assumes version 2.0.8, subversion
  revision 7665, and a work folder at ~/asf.

Note: The MapReady binaries are mapready and asf_mapready, but
  they are still built in the asf_convert_gui and asf_convert
  source folders respectively.  The executable and icon file (etc)
  files are renamed as they are copied to the bin and share folders.

 1. Check out the code to be released (if not already), i.e. branched version
    or the trunk, i.e. to ~/asf/asf_tools.  NOTE: You will perform an
    'svn export' to obtain a copy of the tools for building the release
    later in this procedure.

 2. Update the version number(s) in ~/asf/asf_tools/include/asf_version.h
    and commit the change to the subversion repository.  Example:

    a) MAPREADY_VERSION_STRING "2.0.8-dev"
       MAPREADY_VERSION 2.0

        changes to

       MAPREADY_VERSION_STRING "2.0.8"
       MAPREADY_VERSION 2.0

    b) svn ci

 3. In your regular subversion checkout (not your exported version), bump
    the version in include/asf_version.h and add "-dev" to the end, then
    commit the change to the repository.

    a)
       MAPREADY_VERSION_STRING "2.0.9-dev"
       MAPREADY_VERSION 2.0

    b) svn ci

 4. When doing a release close to final release, you may wish to
      update "mapready-version_history.txt" with the release date and
      version number, and check that in.

      For example, for 2.0.13 the first line is:
        MapReady 2.0.13 (released 2008 August 27)

      When building 2.0.14, this line needs to be updated accordingly.

 5. Tag the repository:

      svn copy svn+ssh://svn/svn/asf_tools/trunk
               svn+ssh://svn/svn/asf_tools/tags/mapready_v2-0-8

    [[ Or if tagging a branched revision --
      svn copy svn+ssh://svn/svn/asf_tools/branches/mapready_v2-0-x
               svn+ssh://svn/svn/asf_tools/tags/mapready_v2-0-8
    ]]

 6. Create a clean directory where you will produce the build (etc),
    for example (change the revision number to the one that you have
    checked out):

      mkdir ~/asf/svn-r7665

 7. Check out autotar and rpmbuild into this work directory.  Example:

      cd ~/asf/svn-r7665
      svn co svn+ssh://svn/svn/release/trunk/autotar release/autotar
      svn co svn+ssh://svn/svn/release/trunk/rpmbuild release/rpmbuild

 8. Make working directories:

      cd ~/asf/svn-r7665
      mkdir -p release/tar_filelist release/tar

 9. If you have never copied the .rpmmacros and .rpmrc files to your
    home directory, then do so now, otherwise skip to step 7:

      cd ~/asf/svn-r7665/release/rpmbuild
      cp dot.rpmmacros ~/.rpmmacros
      cp dot.rpmrc ~/.rpmrc

 10. Edit ~/.rpmmacros to update the top directory for your build's rpmbuild
    parent directory, i.e. the 'release' folder.  Find the %_topdir line and
    edit as follows:

      %_topdir      %(echo $HOME)/asf/svn-r7665/release

 11. Check out a copy of the release:

      cd ~/asf/svn-r7665
      svn export svn+ssh://svn/svn/asf_tools/tags/mapready_v2-0-8 asf_tools

 12. Make sure the "References" section in the end of the asf_convert_gui.txt
     file has been removed, including the 'Visible Links' that occur there.

     In the ~/asf/svn-r7665/asf_tools/src/asf_convert_gui folder, edit the
     asf_convert_gui.txt file as follows (if they exist):

     REMOVE The following (typical set of) lines:

       References

          Visible links
          1. file:///tmp/html-tR2820#overview
          2. file:///tmp/html-tR2820#general-tab
          3. file:///tmp/html-tR2820#import-options
          4. file:///tmp/html-tR2820#polarimetry-options
          5. file:///tmp/html-tR2820#dem
          6. file:///tmp/html-tR2820#geocode
          7. file:///tmp/html-tR2820#export
          8. file:///tmp/html-tR2820#files
          9. file:///tmp/html-tR2820#execute
         10. file:///tmp/html-tR2820#AEN284
         11. file:///tmp/html-tR2820#caveats
         12. file:///tmp/html-tR2820#contacting-us
         13. mailto:uso@asf.alaska.edu


 13. Make sure DEBUG_BUILD is not set to any particular debug level:

      unset DEBUG_BUILD

 14. If you want to meddle with what the package will include you'll need to
     edit ~/asf/svn-r7665/asf_tools/make_support/master_program_list. That is
     where all the tools to be compiled are listed with other tools that they
     depend on.  There's also a CATEGORIES category in the master_program_list.
     You can make special groupings of tools in CATEGORIES section (eg 'mapready'
     which includes asf_mapready, mapready, asf_export, asf_import, etc.).

     NOTE: In general, you should not have to edit the master_program_list.

 15. ** KLUDGE #1 **
     Create svn_rev.h:

      cd ~/asf/svn-r7665/asf_tools/include
      echo "#define SVN_REV \"7665\"" > svn_rev.h

 16. ** KLUDGE #2 **
     a. Edit ~/asf/svn-r7665/asf_tools/Makefile.in, eliminate the following
        lines from the MAPREADY_MODULES list:

          src/ardop \
          src/llh2ls \
          src/diffimage \
          src/diffmeta \
          src/gr2sr \
          src/convert2vector \
          src/convert2vector_gui \

     b. Eliminate the following line from Makefile.in in the mapready: target.
        At the time of writing these instructions, this line occurs near line 230.
        (After deleting the items above.)

          echo "#define SVN_REV \"0`svn info|grep Revision|cut -c11-`\"">include/svn_rev.h

     c. The "stp" "ap" "req" "c2v", "jpl", "create_thumbs", "data_qc", and "oldtools" targets,
        and all associated build instructions, should all be deleted from Makefile.in

     d. Update the "all" target to only build "mapready".

     e. Fix the "clean" target near the end of the file, to only include MAPREADY_MODULES,
        i.e., delete the STP_MODULES and AP_MODULES, etc.

 17. ** KLUDGE #3 **

     Edit ~/asf/svn-r7665/asf_tools/src/asf_convert_gui/Makefile, and change
     the default target to include "doc.  This should amount to uncommenting
     line 138, and commenting out line 139 in the Unix section of the make file

       vi ~/asf/svn-r7665/asf_tools/src/asf_convert_gui/Makefile

 18. Create the source.mapready_package file in ~/asf/svn-r7665/releast/autotar
     (automatically by makemake if you followed the directory structure
     instructions listed here):

      cd ~/asf/svn-r7665/asf_tools/make_support
      make
      ./makemake

 19. ** KLUDGE #4 **
    Add missing tools to the source.mapready_package file:

      cd ~/asf/svn-r7665/release/autotar

    Edit release/autotar/source.mapready_package, adding these items:

src/libasf_insar
external
src/meta2envi
src/resample
src/fill_holes
src/to_sr
src/deskew
src/shift_geolocation
src/trim
src/proj2proj
src/smooth
src/farcorr
src/asf_calpol
src/asf_gamma_import
src/asf_airsar_import
src/fftMatch

 20. Run the autotar script:

      cd ~/asf/svn-r7665/release/autotar
      ./tarfile src ~/asf/svn-r7665 mapready_package

 21. Run the rpmprep script (from autotar folder):

      ./rpmprep mapready_package asf_mapready

 22. Copy an older .spec file to the new one, then edit the new .spec
     file in to use the correct version and to add a brief version
     history comment (towards the end of the file):

      cd ~/asf/svn-r7665/release/rpmbuild
      cp <old .spec file> asf_mapready-2.0.8-1.spec
      vi asf_mapready-2.0.8-1.spec

 23. Save the new .spec file in the repository:

      svn add asf_mapready-2.0.8-1.spec
      svn ci asf_mapready-2.0.8-1.spec

 24. a) If you have not already added the secret and public gpg keys
     to your ~/.gnupg folder, then do so now or the rpm build will
     not sign the rpms.  Note that you CAN sign the rpms after they
     have been created with "rpm --addsign <rpm file name>".  Note that
     the first step below is unnecessary if you already have a .gnupg
     folder in your home directory:

     mkdir ~/.gnupg
     cp dot.gnupg* ~/.gnupg
     cd ~/.gnupg
     gunzip *
     tar xvf *

     b) If the machine that you are using has not had the public key
     imported to the rpm public keys database yet, you will not be
     able to check your rpms to see if they were signed properly.
     Import the public key into the rpm public keys database as
     shown below (you must have root access).  Still in the rpmbuild
     folder ...do the following:

     cd ~/asf/svn-r7665/release/rpmbuild/public_key
     sudo rpm -import asf_tools-pubkey.asc

 25. Build and check the rpm:

      cd ~/asf/svn-r7665/release/rpmbuild
      rpmbuild -ba --sign asf_mapready-2.0.8-1.spec
      <password is 'bob'>
      rpm -K RPMS/asf_mapready-2.0.8-1.i386.rpm

     After the "rpm -K" command, you should see an 'OK' statement similar
     to the one below that indicates the rpm was properly signed:

      asf_mapready-2.0.8-1.i386.rpm: (sha1) dsa sha1 md5 gpg OK

     IMPORTANT: If you get a response that says "OK" but does NOT have "gpg"
     in the list (see above), then the rpm is NOT signed!  Check your
     ~/.rpmmacros file to make sure no-sign is not set and that lines similar
     to the following do exist, otherwise no signing will take place:

     # RPM Signing stuff
     %_signature     gpg     
     %_gpg_path      ~/.gnupg
     %_gpgbin        /usr/bin/gpg
     %_gpg_name      ASF User Tool Development

     These lines should already be in the .rpmmacros file.  If they are not,
     then use Subversion to check out fresh copies rather than enter them
     by hand (just in case changes have taken place.)

     If you get a response that includes the words "NOT OK", then it usually
     means the ASCII public key has not been imported with "rpm -import"
     yet.

 26. Create tarballs of the rpms (the binary rpm will also contain the
     README_rpm.txt file from ~/asf/svn-r7665/asf_tools folder):

      cd ~/asf/svn-r7665/release/rpmbuild
      ./tarrpms asf_mapready mapready

 27. Put the built files on dq (still in ~/asf/svn-r7665/release/rpmbuild):

      mkdir /stor/dq/release_builds/mapready/v2.0.8
      cp dist/* /stor/dq/release_builds/mapready/v2.0.8
      chmod 775 /stor/dq/release_builds/mapready/v2.0.8
      chmod 664 /stor/dq/release_builds/mapready/v2.0.8/*
      chgrp dq /stor/dq/release_builds/mapready/v2.0.8
      chgrp dq /stor/dq/release_builds/mapready/v2.0.8/*

 28. **OPTIONAL**
     'Da Man' likes to finish up by doing this:

      mv ~/asf/svn-r7665 ~/asf/mapready-v2.0.8


MapReady v2.x Windows Release Build Procedure:
----------------------------------------------
 * Notes:
      - The installer package is now called "mapreadyPackageInstall<VV>.nsi"
        where <VV> is the version number: e.g., "mapreadyPackageInstall21.nsi"

      - You must have MSys, MinGW, Cygwin and the Nullsoft installer system
        installed on the build machine for this build step.

 * Make sure DEBUG_BUILD is not set to any particular debug level:

      unset DEBUG_BUILD

 * Go to the UTD Tools Wiki and follow the instructions for preparing
   the tools to be built with MinGW:

   http://wiki/asf/MinGW

 * Once you've completed the MinGW preparation steps, then build the ASF tools:

      cd <path>/asf_tools
      make clean
      make

 * Optional:  We are currently not distributing akdem_grab, but if you want to
   distribute it with the Windows build, then you will have to build akdem_grab
   manually:
   
   1) From asf_tools directory:

            cd prototype/src/usgs_seamless
            make

      The Makefile should copy akdem_grab to ../../../bin automatically.

      If "make" fails because of an error in osl/socket.cpp (it did for me)
      then you probably need to do this:

            vi ../osl/socket.cpp
            --> comment out line 35: typedef int socklen_t;

   2) In the NSIS script, find the akdem_grab.exe line and un-comment it out
      so the file will be included.  Change this:

      ;File "${ASF_BINS_LOC}\akdem_grab.exe

      to this by removing the leading ';' character:
      
      File "${ASF_BINS_LOC}\akdem_grab.exe

 * Make the help files:
   1) From a CYGWIN window (important!), not a MSys/MinGW window, build the MapReady
      htmlhelp.chm manually and get it to the proper location.

      From the asf_tools directory:

 	   cd src/asf_convert_gui
 	   make htmlhelp.chm

   2) From a MSYS/MINGW window (important!), not a CygWin window, build the mapready
      GUI:

 	   make

 * Edit

    <path>/release/trunk/windows_installer/convert_package/mapreadyPackageInstall21.nsi

    and update the locations of the tool binaries and the cygwin
    binaries directories.  Look for the ASF_BINS_LOC and CYGWIN_BINS_LOC
    definitions respectively (although the CygWin stuff shouldn't matter now.)

 * Build the Windows self-installing executable:

    a) In a Windows file manager window, right click on the script
       that you edited in the previous step and select 'Compile NSIS script'

    b) -deprecated- (The MinGW library is now statically linked to the tools)
       The installer is going to grab the cygwin1.dll file from
       ../support/cygwin (along with a bunch of other dlls).  You
       must test the self-installer on a Windows machine that does
       NOT have Cygwin installed on to verify that the cygwin1.dll
       file from this folder works with our code.  If not, then you
       should replace this cygwin1.dll file with the one from your
       Cygwin installation (c:/cygwin/bin/cygwin1.dll) and try
       again.  Ideally, you would also test the installer on a
       machine WITH Cygwin installed as well.

 * Create a zip and tarball of the generated binary (use Winzip, 7zip, or unix)

    Currently we are using the naming scheme:
       <package>-<V>.<V>.<V>-<OS>.<compression type>
       e.g.
       mapready-2.1.8-win32.zip
       mapready-2.1.8-win32.tar.gz

 * Put these files with the already packaged Linux and Source distributions to
   our favorite 'point release' locations using WinSCP and your favorite web
   browser. Then DQ can test this stuff!

     On Data Quality's machine at
       dq.asf.alaska.edu:/stor/dq/release_builds/mapready/v2.1.8

     And on our Wiki page
       http://wiki/asf/UTD_tools_page


SAR TRAINING PROCESSOR (STP) SOURCE AND RPM RELEASE PROCEDURE
-------------------------------------------------------------

* Check out the branched or trunk code to be released to a directory
  (e.g.~/asf/asf_tools). NOTE: You will perform an 'svn export' to obtain
  a copy of the tools for building the release later in this procedure.
    Trunk:
    > svn co svn+ssh://svn/svn/asf_tools/trunk asf_tools
    Or Branch:
    > svn co svn+ssh://svn/svn/asf_tools/branches/stp_v?-?-x asf_tools

* Update STP_VERSION in include/asf_version.h

* Tag the repository:
    Trunk:
    > svn copy svn+ssh://svn/svn/asf_tools/trunk \
               svn+ssh://svn/svn/asf_tools/tags/stp_v?-?-?
    Or Branch:
    > svn copy svn+ssh://svn/svn/asf_tools/branches/stp_v?-?-x \
               svn+ssh://svn/svn/asf_tools/tags/stp_v?-?-?

* Create a clean directory where you will produce the build (etc),
  for example:

    > mkdir ~/asf/svn-r<REVISION#>

* Export a copy of the release in the work directory:

    > cd ~/asf/svn-r<REVISION#>
    > svn export svn+ssh://svn/svn/asf_tools/tags/stp_v?-?-? asf_tools

* Check out autotar and rpmbuild into the work directory.

    > cd ~/asf/svn-r<REVISION#>
    > svn co svn+ssh://svn/svn/release/trunk/autotar release/autotar
    > svn co svn+ssh://svn/svn/release/trunk/rpmbuild release/rpmbuild

* Make working directories for autotar:

    > cd ~/asf/svn-r<REVISION#>
    > mkdir -p release/tar_filelist
    > mkdir -p release/tar

* Create the source.stp_package file:

    > cd ~/asf/svn-r<REVISION#>/asf_tools/make_support
    > make
    > ./makemake

* Run the autotar script:

    > cd ~/asf/svn-r<REVISION#>/release/autotar
    > ./tarfile src ~/asf/svn-r<REVISION#> stp_package

* Run the rpmprep script:

    > cd ~/asf/svn-r<REVISION#>/release/autotar
    > ./rpmprep stp_package stp

* Copy an older .spec file to the new one:

    > cd ~/asf/svn-r<REVISION#>/release/rpmbuild
    > cp <old .spec file> stp-?.?.?-1.spec

* Edit the new .spec file (stp-?.?.?-1.spec) to use the correct version.
  The version number to be edited should be on line 2:

    Text chunk:
      Summary: ASF SAR Training Processor
      Name: stp
      Version: ?.?.?
      Release: 1
      License: BSD

* If you have never copied the .rpmmacros and .rpmrc files to your
  home directory, then do so now:

    > cd ~/asf/svn-r<REVISION#>/release/rpmbuild
    > cp dot.rpmmacros ~/.rpmmacros
    > cp dot.rpmrc ~/.rpmrc

* Edit ~/.rpmmacros to update the top directory to the 'release' folder.
  Find the %_topdir line and  edit as follows:

    %_topdir      %(echo $HOME)/asf/svn-r<REVISION#>/release

* Make sure DEBUG_BUILD is not set to any particular debug level:

    > cd ~/asf/svn-r<REVISION#>/release/rpmbuild
    > unset DEBUG_BUILD

* Build the rpm:

    > rpmbuild -ba stp-?.?.?-1.spec

* Collect rpm & source tarball for Linux & Win32 distribution using the
  tarrpms script. This should put all the *.tar.gz & *.zip files you need
  in ~/asf/svn-r<REVISION#>/release/rpmbuild/Source and
  ~/asf/svn-r<REVISION#>/release/rpmbuild/RPMS:

    > cd ~/asf/svn-r<REVISION#>/release/rpmbuild
    > ./tarrpms stp stp

* Copy all the packages to our favorite archive location. The files you're
  sending should look something like this:
       stp-?.?.?-rpm.tar.gz
       stp-?.?.?-rpm.zip
       stp-?.?.?-src.tar.gz
       stp-?.?.?-src.zip

    > cd ~/asf/svn-r<REVISION#>/release/rpmbuild
    > scp ./dist/* dq:/stor/dq/release_builds/stp/?.?.?

* Let Data Quality know where stuff is for validation.
    DQ Lead:       Wade Albright (walbrigh@asf.alaska.edu, x1985)
    Master tester: Charley Slater (cslater@asf.alaska.edu, x5633)

* If it's been validated let the web person know to deliver it to the web
    Jeannine Haney <jhaney@asf.alaska.edu, x5793)

* Rejoice! For this task is done!



SAR TRAINING PROCESSOR (STP) WINDOWS RELEASE PROCEDURE
------------------------------------------------------

NOTE: it is assumed that you have already tagged the repository in preparation
      for this release you are about to do. The tagging procedure takes place
      in the first few steps source & rpm release procedure in case you'd like
      a reference.

* Make sure you've got these programs installed:
     * Cygwin
     * Nullsoft installer system
     * Tortoise SVN (or the svn that comes with cygwin,
       but only use one of these svns for your checkins, checkouts, etc,
       because they don't play very well together)

* Open a Cygwin terminal

* Check out the tagged version of the stp for release.

   > svn export svn+ssh://svn/svn/asf_tools/tags/stp_v?-?-? asf_tools

* If you've got another code tree that has already been built, and you're sure
  that the external libraries you have built already are the same as the
  tagged version you're about to check out, you can copy that into your
  tagged tree.

   > cp -r prebuilt/asf_tools/external tagged/asf_tools/.

* Make sure DEBUG_BUILD is not set to any particular debug level:

    > unset DEBUG_BUILD

* Build the ASF tools:

      cd <path>/asf_tools
      make clean
      make

* Edit
  <path>/release/trunk/windows_installer/stp_package/stpPackageInstall<??>.nsi
  where <??> is the version number (e.g. stpPackageInstall10.nsi) and update
  the locations of the tool binaries and the cygwin binaries directories. Look
  for the ASF_BINS_LOC and CYGWIN_BINS_LOC definitions respectively.

* Build the Windows self-installing executable:

    a) In a Windows file manager window, right click on the script
       that you edited in the previous step and select 'Compile NSIS script'

    b) The installer is going to grab the cygwin1.dll file from
       ../support/cygwin (along with a bunch of other dlls).  You
       must test the self-installer on a Windows machine that does
       NOT have Cygwin installed on to verify that the cygwin1.dll
       file from this folder works with our code.  If not, then you
       should replace this cygwin1.dll file with the one from your
       Cygwin installation (c:/cygwin/bin/cygwin1.dll) and try
       again.  Ideally, you would also test the installer on a
       machine WITH Cygwin installed as well.

* Create a tarball and zip of the generated binary. In Unix-land you can use
  tar czf for the tar.gz and the zip command for the .zip. On windows Winzip
  can take care of the .zip or 7zip can do both.
  The file to package should be at
  <path>\release\windows_installer\stp_package\STP_Setup.exe
  The tarballed and zipped file names should be formatted as follows where
  the ?s are version numbers:

    stp-?.?.?-win32.tar.gz
    stp-?.?.?-win32.zip

* Copy the packages (winSCP or FileZilla) to our archive location, currently:
    dq:/stor/dq/release_builds/stp/?.?.?

* Let Data Quality know where stuff is for validation.
    DQ Lead:       Wade Albright (walbrigh@asf.alaska.edu, x1985)
    Master tester: Charley Slater (cslater@asf.alaska.edu, x5633)

* If it's been validated let the web person know to deliver it to the web.
    Jeannine Haney <jhaney@asf.alaska.edu, x5793)

* Rejoice! For this task is done!




JPL Mosaic Suite RPM Build Procedure:
-------------------------------------
Note: The following example assumes subversion revision 8072, jpl version
      of 1.0.0, and a work folder at ~/asf.

* Check out the code to be released (if not already), i.e. branched version
  or the trunk, i.e. to ~/asf/asf_tools.  NOTE: You will perform an
  'svn export' to obtain a copy of the tools for building the release
  later in this procedure.

* Update the version number(s) in ~/asf/asf_tools/include/asf_version.h
  and commit the change to the subversion repository.  Example:

  a) JPL_VERSION_STRING "1.0.0-dev"
      changes to
     JPL_VERSION_STRING "1.0.0"

  b) svn ci

* Tag the repository. Example of tagging the trunk:

     svn copy svn+ssh://svn/svn/asf_tools/trunk \
              svn+ssh://svn/svn/asf_tools/tags/jplmosaicsuite_v1-0-0

* Create a clean directory where you will produce the build (etc),
  for example (change the revision number to the one that you have
  checked out):

     mkdir ~/asf/jpl-r8072

* Check out autotar and rpmbuild into this work directory.  Example:

     cd ~/asf/jpl-r8072
     svn co svn+ssh://svn/svn/release/trunk/autotar release/autotar
     svn co svn+ssh://svn/svn/release/trunk/rpmbuild release/rpmbuild

* Export a copy of the release:

     cd ~/asf/jpl-r8072
     svn export svn+ssh://svn/svn/asf_tools/tags/jplmosaicsuite_v1-0-0 asf_tools

* KLUDGE #1
  Create svn_rev.h:

     cd ~/asf/jpl-r8072/asf_tools/include
     echo '#define SVN_REV "8072"' > svn_rev.h

* Use your favorite editor to edit ~/asf/jpl-r8072/asf_tools/Makefile.in

  a) Change the default target to build the jpl target (around line 194).

	default: jpl

  b) Eliminate the following line the jpl target (around line 260).

	echo "#define SVN_REV \"0`svn info|grep Revision|cut -c11-`\"">include/svn_rev.h

* Create the source.* files in ~/asf/jpl-r8072/release/autotar
  (automatically by makemake if you followed the directory structure
  instructions listed here):

     cd ~/asf/jpl-r8072/asf_tools/make_support
     make
     ./makemake
     rm makemake

* Run the autotar script:

     cd ~/asf/jpl-r8072/release/autotar
     ./tarfile src ~/asf/jpl-r8072 -noext jpl

* Run the rpmprep script (from autotar folder):

     ./rpmprep jpl jplmosaicsuite

* Copy an older .spec file to the new one, then edit the new .spec
  file in to use the correct version:

     cd ~/asf/jpl-r8072/release/rpmbuild
     cp <old .spec file> jplmosaicsuite-1.0.0-1.i386.spec
     vi jplmosaicsuite-1.0.0-1.i386.spec

* Create RPM keys (if not already done)

  a) If you have not already added the secret and public gpg keys
     to your ~/.gnupg folder, then do so now or the rpm build will
     not sign the rpms.  Note that you CAN sign the rpms after they
     have been created with "rpm --addsign <rpm file name>".  Note that
     the first step below is unnessary if you already have a .gnupg
     folder in your home directory:

     cd ~/asf/jpl-r8072/release/rpmbuild
     mkdir ~/.gnupg
     cp dot.gnupg* ~/.gnupg
     cd ~/.gnupg
     gunzip *
     tar xvf *

  b) If the machine that you are using has not had the public key
     imported to the rpm public keys database yet, you will not be
     able to check your rpms to see if they were signed properly.
     Import the public key into the rpm public keys database as
     shown below (you must have root access).  Still in the rpmbuild
     folder ...do the following:

     cd ~/asf/jpl-r8072/release/rpmbuild/public_key
     sudo rpm -import asf_tools-pubkey.asc

* If you have never copied the .rpmmacros and .rpmrc files to your
  home directory, then do so now, otherwise skip to step 7:

     cd ~/asf/jpl-r8072/release/rpmbuild
     cp dot.rpmmacros ~/.rpmmacros
     cp dot.rpmrc ~/.rpmrc

* Edit ~/.rpmmacros to update the top directory for your build's rpmbuild
  parent directory, i.e. the 'release' folder.  Find the %_topdir line and
  edit as follows:

     %_topdir      %(echo $HOME)/asf/jpl-r8072/release

* Clean up any old rpm builds if necessary:

     cd ~/asf/jpl-r8072/release/rpmbuild
     rm -rf BUILD/* RPMS/* SRPMS/*

* Make sure DEBUG_BUILD is not set to any particular debug level:

     unset DEBUG_BUILD

* Build and check the rpm:

     cd ~/asf/jpl-r8072/release/rpmbuild
     rpmbuild -ba --sign jplmosaicsuite-1.0.0-1.i386.spec
     <password is 'bob'>

  OPTIONAL: Check the results of the rpm build:

     rpm -K RPMS/jplmosaicsuite-1.0.0-1.i386.rpm

  After the "rpm -K" command, you should see an 'OK' statement similar
  to the one below that indicates the rpm was properly signed:

     RPMS/jplmosaicsuite-1.0.0-1.i386.rpm: (sha1) dsa sha1 md5 gpg OK

     IMPORTANT: If you get a response that says "OK" but does NOT have "gpg"
     in the list (see above), then the rpm is NOT signed!  Check your
     ~/.rpmmacros file to make sure no-sign is not set and that lines similar
     to the following do exist, otherwise no signing will take place:

     # RPM Signing stuff
     %_signature     gpg     
     %_gpg_path      ~/.gnupg
     %_gpgbin        /usr/bin/gpg
     %_gpg_name      ASF User Tool Development

     These lines should already be in the .rpmmacros file.  If they are not,
     then use Subversion to check out fresh copies rather than enter them
     by hand (just in case changes have taken place.)

  If you get a response that includes the words "NOT OK", then it usually
  means the ASCII public key has not been imported with "rpm -import" yet.

     rpm -qlp RPMS/jplmosaicsuite-1.0.0-1.i386.rpm

  After the -qlp query, you'll get a long list of all that is contained in
  rpm ...useful for checking to make sure that no components were left out.

* Create tarballs of the rpms (the binary rpm will also contain the
  README_rpm.txt file from asf_tools folder):

     cd ~/asf/jpl-r8072/release/rpmbuild
     ./tarrpms jplmosaicsuite jplmosaicsuite

* Put the built files on dq:

     mkdir /stor/dq/release_builds/jplmosaicsuite/1.0.0
     cp dist/* /stor/dq/release_builds/jplmosaicsuite/1.0.0
     chmod 777 /stor/dq/release_builds/jplmosaicsuite/1.0.0
     chmod 666 /stor/dq/release_builds/jplmosaicsuite/1.0.0/*

* Not necessary, but you may want to delete ~/.rpmmacros and ~/.rpmrc

* Update the version number(s) in ~/asf/asf_tools/include/asf_version.h
  and commit the change to the subversion repository.  Example:

  a) JPL_VERSION_STRING "1.0.0"
      changes to
     JPL_VERSION_STRING "1.0.1-dev"

  b) svn ci




create_thumbs RPM Build Procedure:
----------------------------------
Note: The following example assumes version 2.0.2, subversion
  revision 7410, and a work folder at ~/asf.

NOTE: This release procedure assumes that create_thumbs is just
  one tool of many in the MapReady package (and repository) and
  that create_thumbs is to be released as a separate tool from
  within that package.  Once (or if) create_thumbs becomes a
  separate release, then this procedure will (somewhat obviously)
  change as well.

NOTE: While the following procedure works, it definitely needs
  cleaning up.  For example, the list of programs in the master
  program list in <path>/make_support probably don't need to include
  non-create_thumbs programs, and due to the new Makefile structure
  with all the separate targets for each release package, there a
  a bunch of things such as the removal of SVN_REV lines and what
  not that no longer need to be done ...the list of required modules
  are also separated and editing the MAPREADY_MODULES list should
  no longer be needed etc... sigh.  FIXME!

 1. Edit <path>/asf_tools/doc/create_thumbs-version_history.txt to
    update the create_thumbs version history.

 2. Tag create_thumbs in the repository:

       svn copy svn+ssh://svn/svn/asf_tools/trunk
                svn+ssh://svn/svn/asf_tools/tags/create_thumbs_v2-0-2

       [[ Or if tagging a branched revision --
         svn copy svn+ssh://svn/svn/asf_tools/branches/tool_suite_2008Q4
                  svn+ssh://svn/svn/asf_tools/tags/create_thumbs_v2-0-2
       ]]

       NOTE: Due to all the shared library requirements, create_thumbs
       is developed as a part of the mapready tool suite, but is then
       tagged and built for release separately.

 3. Create a clean directory where you will produce the build (etc),
    for example (change the revision number to the one that you have
    checked out):

      mkdir ~/asf/svn-r7410ct

 4. Check out autotar and rpmbuild into this work directory.  Example:

      cd ~/asf/svn-r7410ct
      svn co svn+ssh://svn/svn/release/trunk/autotar release/autotar
      svn co svn+ssh://svn/svn/release/trunk/rpmbuild release/rpmbuild

 5. Make working directories:

      cd ~/asf/svn-r7410ct
      mkdir -p release/tar_filelist release/tar

 6. If you have never copied the .rpmmacros and .rpmrc files to your
    home directory, then do so now, otherwise skip to step 7:

      cd ~/asf/svn-r7410ct/release/rpmbuild
      cp dot.rpmmacros ~/.rpmmacros
      cp dot.rpmrc ~/.rpmrc

 7. Edit ~/.rpmmacros to update the top directory for your build's rpmbuild
    parent directory, i.e. the 'release' folder.  Find the %_topdir line and
    edit as follows:

      %_topdir      %(echo $HOME)/asf/svn-r7410ct/release

 8. Check out (export w/o SVN info) a copy of the release:

      cd ~/asf/svn-r7410ct
      svn export svn+ssh://svn/svn/asf_tools/tags/create_thumbs_v2-0-2 asf_tools

 9. Make sure DEBUG_BUILD is not set to any particular debug level:

      unset DEBUG_BUILD

 10. Modify the list of what packages (etc) are to be included by editing
     ~/asf/svn-r7410ct/asf_tools/make_support/master_program_list.  The
     after-editing results are shown section by section below:

     a. Here is what the LIBS list looks like (much removed, create_thumbs
     dependencies kept):

LIBS
{
@src/
        asf
        asf_fft
        libasf_proj
        asf_meta
        libasf_sar
        libasf_raster
        libasf_vector
        libasf_import
        libasf_ardop
        libasf_export
}

    b. And here is what the PROGRAMS list looks like:

PROGRAMS
{
@src/
        create_thumbs { }
}

    c. And here is what the DOCUMENTATION list looks like:

DOCUMENTATION
{
@doc/
        create_thumbs-version_history.txt
}

    d. And here is what the mapready and all package descriptions look like
    (NOTE: create_thumbs and its version history is added if necessary)

CATEGORIES
{
# Create Thumbs package
        create_thumbs_package
        {
                create_thumbs
                create_thumbs-version_history.txt
        }
}


 11. ** KLUDGE #1 **
     Create svn_rev.h:

      cd ~/asf/svn-r7410ct/asf_tools/include
      echo "#define SVN_REV \"7410\"" > svn_rev.h

 12. Eliminate the following lines from Makefile.in.  At the time of writing
     these instructions, this line occurs in EIGHT places: near line 237, 254,
     269, 284, 299, 314, 329, and 344, i.e in the mapready, stp, ap, req,
     c2v, jpl, create_thumbs, and data_qc targets. FIXME: fix instructions to only
     remove this line from the create_thumbs target.

        echo "#define SVN_REV \"0`svn info|grep Revision|cut -c11-`\"">include/svn_rev.h

 13. In the list of modules to remove during a 'make clean', remove all
     package modules, then add the create_thumbs package module:

clean:
        rm -rf $(S_LIBDIR)
        rm -rf $(S_BINDIR)
        rm -rf $(S_DOCDIR)
        rm -rf $(S_SHAREDIR)
        rm -rf share
        rm -rf man
        $(foreach MODULE, $(CREATE_THUMBS_MODULES), \
                $(MAKE) clean -C $(MODULE) &&) true

 14. Still in Makefile.in, edit the default target to make it create_thumbs
     rather than mapready:

     BEFORE
     default: mapready

     AFTER
     default: create_thumbs

 15. Create the source.create_thumbs file in ~/asf/svn-r7410ct/release/autotar
     (automatically by makemake if you followed the directory structure
     instructions listed here):

      cd ~/asf/svn-r7410/asf_tools/make_support
      make
      ./makemake

     NOTE: In this case, the source.mapready_package and source.create_thumbs
     files should be identical (check them with diff to make sure), so we'll
     just use the create_thumbs version from here on out ...for clarity.

 16. Run the autotar script:

      cd ~/asf/svn-r7410ct/release/autotar
      ./tarfile src ~/asf/svn-r7410ct create_thumbs_package

 17. Run the rpmprep script (from autotar folder):

      ./rpmprep create_thumbs_package asf_create_thumbs

 18. Copy an older .spec file to the new one, then edit the new .spec
     file in to use the correct version:

      cd ~/asf/svn-r7410ct/release/rpmbuild
      cp <old .spec file> asf_create_thumbs-1.3-1.spec
      vi asf_create_thumbs-1.3-1.spec

     NOTE: See example .spec file (below) at the end of these
       release procedures

 19. a) If you have not already added the secret and public gpg keys
     to your ~/.gnupg folder, then do so now or the rpm build will
     not sign the rpms.  Note that you CAN sign the rpms after they
     have been created with "rpm --addsign <rpm file name>".  Note that
     the first step below is unnessary if you already have a .gnupg
     folder in your home directory:

     mkdir ~/.gnupg
     cp dot.gnupg* ~/.gnupg
     cd ~/.gnupg
     gunzip *
     tar xvf *

     b) If the machine that you are using has not had the public key
     imported to the rpm public keys database yet, you will not be
     able to check your rpms to see if they were signed properly.
     Import the public key into the rpm public keys database as
     shown below (you must have root access).  Still in the rpmbuild
     folder ...do the following:

     cd ~/asf/svn-r7410ct/release/rpmbuild/public_key
     sudo rpm -import asf_tools-pubkey.asc

 20. Clean up any old rpm builds if necessary:

     cd ~/asf/svn-r7410ct/release/rpmbuild
     rm -rf BUILD/*
     rm -rf RPMS/*
     rm -rf SRPMS/*

 21. Build and check the rpm:

      cd ~/asf/svn-r7410ct/release/rpmbuild
      rpmbuild -ba --sign asf_create_thumbs-1.3-1.spec
      <password for requested pass phrase is 'bob'>

      OPTIONAL: Check the results of the rpm build:

      cd RPMS
      rpm -K asf_create_thumbs-1.3-1.i386.rpm
      rpm -qlp asf_create_thumbs-1.3-1.i386.rpm

     After the "rpm -K" command, you should see an 'OK' statement similar
     to the one below that indicates the rpm was properly signed:

      asf_create_thumbs-1.3-1.i386.rpm: (sha1) dsa sha1 md5 gpg OK

     IMPORTANT: If you get a response that says "OK" but does NOT have "gpg"
     in the list (see above), then the rpm is NOT signed!  Check your
     ~/.rpmmacros file to make sure no-sign is not set and that lines similar
     to the following do exist, otherwise no signing will take place:

     # RPM Signing stuff
     %_signature     gpg     
     %_gpg_path      ~/.gnupg
     %_gpgbin        /usr/bin/gpg
     %_gpg_name      ASF User Tool Development

     These lines should already be in the .rpmmacros file.  If they are not,
     then use Subversion to check out fresh copies rather than enter them
     by hand (just in case changes have taken place.)

     If you get a response that includes the words "NOT OK", then it usually
     means the ASCII public key has not been imported with "rpm -import"
     yet.

     After the -qlp query, you'll get a long list of all that is contained
     in rpm ...useful for checking to make sure that no components were left
     out.

 22. Create tarballs of the rpms (the binary rpm will also contain the
     README_rpm.txt file from ~/asf/svn-r7410/asf_tools folder):

      cd ~/asf/svn-r7410ct/release/rpmbuild
      ./tarrpms asf_create_thumbs create_thumbs

 23. Put the built files on dq (still in ~/asf/svn-r7410/release/rpmbuild):

      mkdir /stor/dq/release_builds/create_thumbs/v1.3
      cp dist/* /stor/dq/release_builds/create_thumbs/v1.3
      chmod 775 /stor/dq/release_builds/create_thumbs/v1.3
      chmod 664 /stor/dq/release_builds/create_thumbs/v1.3/*


EXAMPLE .spec FILE CONTENTS (you can copy this and edit if necessary):
----------------------------------------------------------------------
Summary: ASF create_thumbs package
Name: asf_create_thumbs
Version: 1.5
Release: 1
License: BSD
Group: Applications/Scientific
URL: http://www.asf.alaska.edu
Source: asf_create_thumbs.src.tar.gz
BuildRoot: %{_buildroot}
Prefix: /usr/local

%description
This package contains create_thumbs (only), a tool
for creating thumbnails and browse images from SAR
files.  This is a subset of the ASF Remote Sensing
Toolkit.
%prep
%setup -q -n ${NAME}

%build
cd %{_builddir}/asf_tools
./configure --prefix=$RPM_BUILD_ROOT/usr/local
make

%install
rm -rf $RPM_BUILD_ROOT
cd %{_builddir}/asf_tools
make install
rm -rf $RPM_BUILD_ROOT/usr/local/lib

%clean
rm -rf $RPM_BUILD_ROOT

%files
%defattr(666,root,root,777)
%attr(-,root,root) /usr/local/bin
/usr/local/share

%changelog
* Tue Dec 09 2008 Brian Dixon <bdixon@asf.alaska.edu> - 2.0.2-1
- Minor bug fixes

* Tue Oct 28 2008 Brian Dixon <bdixon@asf.alaska.edu> - 2.0.1-1
- Added JAXA Level 0 (AVNIR-2) support and fixed bugs

* Wed Jul 09 2008 Brian Dixon <bdixon@asf.alaska.edu> - 1.5
- enhanced to allow RSAT and ERS data with missing frames to proceed

* Wed May 28 2008 Brian Dixon <bdixon@asf.alaska.edu> - 1.4
- minor bug fixes, cleaner handling of temporary files

* Sun Apr 27 2008 Brian Dixon <bdixon@asf.alaska.edu> - 1.3
- changed name of package to asf_create_thumbs

* Tue Apr 24 2008 Brian Dixon <bdixon@asf.alaska.edu> - 1.1.3-1
- create_thumbs (alone), JERS1 support added

* Tue Mar 26 2008 Brian Dixon <bdixon@asf.alaska.edu> - 1.1.2-1
- create_thumbs (alone)



Data QC tool RPM Build Procedure:
-------------------------------------
Note: The following example assumes subversion revision 8155, data_qc
version
      of 1.0.0, and a work folder at ~/asf.

* Check out the code to be released (if not already), i.e. branched
  version
  or the trunk, i.e. to ~/asf/asf_tools.  NOTE: You will perform an
  'svn export' to obtain a copy of the tools for building the release
  later in this procedure.

* Update the version number(s) in
  ~/asf/asf_tools/include/asf_version.h
  and commit the change to the subversion repository.  Example:

  a) DATA_QC_VERSION_STRING "1.0.0-dev"
      changes to
     DATA_QC_VERSION_STRING "1.0.0"

  b) svn ci

* Tag the repository. Example of tagging the trunk:

     svn copy svn+ssh://svn/svn/asf_tools/trunk \
              svn+ssh://svn/svn/asf_tools/tags/data_qc_v1-0-0

* Create a clean directory where you will produce the build (etc),
  for example (change the revision number to the one that you have
  checked out):

     mkdir ~/asf/data_qc_r8155

* Check out autotar and rpmbuild into this work directory.  Example:

     cd ~/asf/data_qc_r8155
     svn co svn+ssh://svn/svn/release/trunk/autotar release/autotar
     svn co svn+ssh://svn/svn/release/trunk/rpmbuild release/rpmbuild

* Export a copy of the release:

     cd ~/asf/data_qc_r8155
     svn export svn+ssh://svn/svn/asf_tools/tags/data_qc_v1-0-0
     asf_tools

* KLUDGE #1
  Create svn_rev.h:

     cd ~/asf/data_qc_r8155/asf_tools/include
     echo '#define SVN_REV "8155"' > svn_rev.h

* Use your favorite editor to edit
  ~/asf/data_qc_r8155/asf_tools/Makefile.in

  a) Change the default target to build the data_qc target (about line
     215).

        default: data_qc

  b) Eliminate the following line the data_qc target (around line 300).

        echo "#define SVN_REV \"0`svn info|grep Revision|cut
        -c11-`\"">include/s
vn_rev.h

* Create the source.* files in ~/asf/jpl-r8072/release/autotar
  (automatically by makemake if you followed the directory structure
  instructions listed here):

     cd ~/asf/data_qc_r8155/asf_tools/make_support
     make
     ./makemake
     rm makemake

* Run the autotar script:

     cd ~/asf/data_qc_r8155/release/autotar
     ./tarfile src ~/asf/data_qc_r8155 data_qc

* Run the rpmprep script (from autotar folder):

     ./rpmprep jpl jplmosaicsuite

* Copy an older .spec file to the new one, then edit the new .spec
  file in to use the correct version:

     cd ~/asf/data_qc_r8155/release/rpmbuild
     cp <old .spec file> data_qc-1.0.0-1.i386.spec
     vi data_qc-1.0.0-1.i386.spec

* Create RPM keys (if not already done)

  a) If you have not already added the secret and public gpg keys
     to your ~/.gnupg folder, then do so now or the rpm build will
     not sign the rpms.  Note that you CAN sign the rpms after they
     have been created with "rpm --addsign <rpm file name>".  Note
     that
     the first step below is unnessary if you already have a .gnupg
     folder in your home directory:

     cd ~/asf/data_qc_r8155/release/rpmbuild
     mkdir ~/.gnupg
     cp dot.gnupg* ~/.gnupg
     cd ~/.gnupg
     gunzip *
     tar xvf *

  b) If the machine that you are using has not had the public key
     imported to the rpm public keys database yet, you will not be
     able to check your rpms to see if they were signed properly.
     Import the public key into the rpm public keys database as
     shown below (you must have root access).  Still in the rpmbuild
     folder ...do the following:

     cd ~/asf/data_qc_r8155/release/rpmbuild/public_key
     sudo rpm -import asf_tools-pubkey.asc

* If you have never copied the .rpmmacros and .rpmrc files to your
  home directory, then do so now, otherwise skip to step 7:

     cd ~/asf/data_qc_r8155/release/rpmbuild
     cp dot.rpmmacros ~/.rpmmacros
     cp dot.rpmrc ~/.rpmrc

* Edit ~/.rpmmacros to update the top directory for your build's
  rpmbuild
  parent directory, i.e. the 'release' folder.  Find the %_topdir line
  and
  edit as follows:

     %_topdir      %(echo $HOME)/asf/data_qc_r8155/release

* Clean up any old rpm builds if necessary:

     cd ~/asf/data_qc_r8155/release/rpmbuild
     rm -rf BUILD/* RPMS/* SRPMS/*

* Make sure DEBUG_BUILD is not set to any particular debug level:

     unset DEBUG_BUILD

* Build and check the rpm:

     cd ~/asf/data_qc_r8155/release/rpmbuild
     rpmbuild -ba data_qc-1.0.0-1.i386.spec
     <password is 'bob'>

  OPTIONAL: Check the results of the rpm build:

     rpm -K RPMS/data_qc-1.0.0-1.i386.rpm

  After the "rpm -K" command, you should see an 'OK' statement similar
  to the one below that indicates the rpm was properly signed:

     RPMS/data_qc-1.0.0-1.i386.rpm: (sha1) dsa sha1 md5 OK

  If you get a response that includes the words "NOT OK", then it
  usually
  means the ASCII public key has not been imported with "rpm -import"
  yet.

     rpm -qlp RPMS/data_qc-1.0.0-1.i386.rpm

  After the -qlp query, you'll get a long list of all that is
  contained in
  rpm ...useful for checking to make sure that no components were left
  out.

* Sign the rpm:

     rpm --addsign data_qc-1.0.0-1.i386.spec
     <password is 'bob'>

  You can run the same on the rpm again. This time you should get
  this:

     RPMS/data_qc-1.0.0-1.i386.rpm: (sha1) dsa sha1 md5 gpg OK

     IMPORTANT: If you get a response that says "OK" but does NOT have "gpg"
     in the list (see above), then the rpm is NOT signed!  Check your
     ~/.rpmmacros file to make sure no-sign is not set and that lines similar
     to the following do exist, otherwise no signing will take place:

     # RPM Signing stuff
     %_signature     gpg     
     %_gpg_path      ~/.gnupg
     %_gpgbin        /usr/bin/gpg
     %_gpg_name      ASF User Tool Development

     These lines should already be in the .rpmmacros file.  If they are not,
     then use Subversion to check out fresh copies rather than enter them
     by hand (just in case changes have taken place.)

* Create tarballs of the rpms (the binary rpm will also contain the
  README_rpm.txt file from asf_tools folder):

     cd ~/asf/data_qc_r8155/release/rpmbuild
     ./tarrpms data_qc data_qc

* Put the built files on dq:

     mkdir /stor/dq/release_builds/data_qc/1.0.0
     cp dist/* /stor/dq/release_builds/data_qc/1.0.0
     chmod 777 /stor/dq/release_builds/data_qc/1.0.0
     chmod 666 /stor/dq/release_builds/data_qc/1.0.0/*

* Not necessary, but you may want to delete ~/.rpmmacros and ~/.rpmrc

* Update the version number(s) in
  ~/asf/asf_tools/include/asf_version.h
  and commit the change to the subversion repository.  Example:

  a) DATA_DQ_VERSION_STRING "1.0.0"
      changes to
     DATA_DQ_VERSION_STRING "1.0.1-dev"

  b) svn ci
