
The User Tool Development Group's Release Procedure Instructions:
=================================================================

MapReady v2.x RPM Build Procedure:
----------------------------------
Note: The following example assumes version 2.0.8, subversion
  revision 7665, and a work folder at ~/asf.

Note: The MapReady binaries are mapready and asf_mapready, but
  they are still built in the asf_convert_gui and asf_convert
  source folders respectively.  The executable and icon file (etc)
  files are renamed as they are copied to the bin and share folders.

 1. Check out the code to be released (if not already), i.e. branched version
    or the trunk, i.e. to ~/asf/asf_tools.  NOTE: You will perform an
    'svn export' to obtain a copy of the tools for building the release
    later in this procedure.

 2. Update the version number(s) in ~/asf/asf_tools/include/asf_version.h
    and commit the change to the subversion repository.  Example:

    a) MAPREADY_VERSION_STRING "2.0.8-dev"

        changes to

       MAPREADY_VERSION_STRING "2.0.8"

    b) svn ci

 2.5: When doing a release close to final release, you may wish to
      update "mapready-version_history.txt" with the release date and
      version number, and check that in.

      For example, for 2.0.13 the first line is:
        MapReady 2.0.13 (released 2008 August 27)

      When building 2.0.14, this line needs to be updated accordingly.

 3. Tag the repository:

      svn copy svn+ssh://svn/svn/asf_tools/trunk
               svn+ssh://svn/svn/asf_tools/tags/mapready_v2-0-8

    [[ Or if tagging a branched revision --
      svn copy svn+ssh://svn/svn/asf_tools/branches/mapready_v2-0-x
               svn+ssh://svn/svn/asf_tools/tags/mapready_v2-0-8
    ]]

 4. Create a clean directory where you will produce the build (etc),
    for example (change the revision number to the one that you have
    checked out):

      mkdir ~/asf/svn-r7665

 5. Check out autotar and rpmbuild into this work directory.  Example:

      cd ~/asf/svn-r7665
      svn co svn+ssh://svn/svn/release/trunk/autotar release/autotar
      svn co svn+ssh://svn/svn/release/trunk/rpmbuild release/rpmbuild

 6. Make working directories:

      cd ~/asf/svn-r7665
      mkdir -p release/tar_filelist release/tar

 7. If you have never copied the .rpmmacros and .rpmrc files to your
    home directory, then do so now, otherwise skip to step 7:

      cd ~/asf/svn-r7665/release/rpmbuild
      cp dot.rpmmacros ~/.rpmmacros
      cp dot.rpmrc ~/.rpmrc

 8. Edit ~/.rpmmacros to update the top directory for your build's rpmbuild
    parent directory, i.e. the 'release' folder.  Find the %_topdir line and
    edit as follows:

      %_topdir      %(echo $HOME)/asf/svn-r7665/release

 9. Check out a copy of the release:

      cd ~/asf/svn-r7665
      svn export svn+ssh://svn/svn/asf_tools/tags/mapready_v2-0-8 asf_tools

 10. Make sure DEBUG_BUILD is not set to any particular debug level:

      unset DEBUG_BUILD

 11. If you want to meddle with what the package will include you'll need to
     edit ~/asf/svn-r7665/asf_tools/make_support/master_program_list. That is
     where all the tools to be compiled are listed with other tools that they
     depend on.  There's also a CATEGORIES category in the master_program_list.
     You can make special groupings of tools in CATEGORIES section (eg 'mapready'
     which includes asf_mapready, mapready, asf_export, asf_import, etc.).

 12. ** KLUDGE #1 **
     Create svn_rev.h:

      cd ~/asf/svn-r7665/asf_tools/include
      echo "#define SVN_REV \"7665\"" > svn_rev.h

 13. ** KLUDGE #2 **
     Edit ~/asf/svn-r7665/asf_tools/Makefile.in, eliminate the following
     lines from the MAPREADY_MODULES list:

      src/ardop \
      src/llh2ls \
      src/diffimage \
      src/diffmeta \
      src/gr2sr \
      src/convert2vector \
      src/convert2vector_gui \

     Eliminate the following line from Makefile.in.  At the time of writing
     these instructions, this line occurs near line 140.  (After deleting the
     items above.)

      echo "#define SVN_REV \"0`svn info|grep Revision|cut -c11-`\"">include/svn_rev.h

     *** NEW in 2.0.5 --->

     The "stp" "ap" "req" "c2v" and "oldtools" targets, and all associated build
     instructions, should all be deleted from Makefile.in

     *** NEW in 2.0.8 --->

     Update the "all" target to only build "mapready".

     *** NEW in 2.0.10 --->

     Fix the "clean" target near the end of the file, to only include MAPREADY_MODULES
     I.e., delete the STP_MODULES and AP_MODULES, etc.

 14. Create the source.mapready_package file in ~/asf/svn-r7665/releast/autotar
     (automatically by makemake if you followed the directory structure
     instructions listed here):

      cd ~/asf/svn-r7665/asf_tools/make_support
      make
      ./makemake

 15. ** KLUDGE #4 **
    Add missing tools to the source.mapready_package file:

      cd ~/asf/svn-r7665/release/autotar

    Edit release/autotar/source.mapready_package, adding these items:

src/libasf_insar
external
src/asf_convert_gui
src/metadata_gui
src/mosaic
src/refine_geolocation
src/asf_terrcorr
src/meta2envi
src/resample
src/fill_holes
src/asf_view
src/to_sr
src/deskew
src/create_thumbs
src/shift_geolocation
src/trim
src/proj2proj
src/sgpsdp
src/smooth
src/farcorr
src/asf_calpol

 16. Run the autotar script:

      cd ~/asf/svn-r7665/release/autotar
      ./tarfile src ~/asf/svn-r7665 mapready_package

 17. Run the rpmprep script (from autotar folder):

      ./rpmprep mapready_package asf_mapready

 18. Copy an older .spec file to the new one, then edit the new .spec
     file in to use the correct version:

      cd ~/asf/svn-r7665/release/rpmbuild
      cp <old .spec file> asf_mapready-2.0.8-1.spec
      vi asf_mapready-2.0.8-1.spec

 19. Save the new .spec file in the repository:

      svn ci asf_mapready-2.0.8-1.spec

 20. a) If you have not already added the secret and public gpg keys
     to your ~/.gnupg folder, then do so now or the rpm build will
     not sign the rpms.  Note that you CAN sign the rpms after they
     have been created with "rpm --addsign <rpm file name>".  Note that
     the first step below is unnessary if you already have a .gnupg
     folder in your home directory:

     mkdir ~/.gnupg
     cp dot.gnupg* ~/.gnupg
     cd ~/.gnupg
     gunzip *
     tar xvf *

     b) If the machine that you are using has not had the public key
     imported to the rpm public keys database yet, you will not be
     able to check your rpms to see if they were signed properly.
     Import the public key into the rpm public keys database as
     shown below (you must have root access).  Still in the rpmbuild
     folder ...do the following:

     cd ~/asf/svn-r7665/release/rpmbuild/public_key
     sudo rpm -import asf_tools-pubkey.asc

 21. Build and check the rpm:

      cd ~/asf/svn-r7665/release/rpmbuild
      rpmbuild -ba --sign asf_mapready-2.0.8-1.spec
      <password is 'bob'>
      rpm -K RPMS/asf_mapready-2.0.8-1.i386.rpm

     After the "rpm -K" command, you should see an 'OK' statement similar
     to the one below that indicates the rpm was properly signed:

      asf_mapready-2.0.8-1.i386.rpm: (sha1) dsa sha1 md5 gpg OK

     If you get a response that includes the words "NOT OK", then it usually
     means the ASCII public key has not been imported with "rpm -import"
     yet.

 22. Create tarballs of the rpms (the binary rpm will also contain the
     README_rpm.txt file from ~/asf/svn-r7665/asf_tools folder):

      cd ~/asf/svn-r7665/release/rpmbuild
      ./tarrpms asf_mapready mapready

 23. **OPTIONAL**
     I like to do this:

      mv ~/asf/svn-r7665 ~/asf/mapready-v2.0.8

 23. Put the built files on dq (still in ~/asf/svn-r7665/release/rpmbuild):

      mkdir /stor/dq/release_builds/mapready/v2.0.8
      cp dist/* /stor/dq/release_builds/mapready/v2.0.8
      chmod 775 /stor/dq/release_builds/mapready/v2.0.8
      chmod 664 /stor/dq/release_builds/mapready/v2.0.8/*
      chgrp dq /stor/dq/release_builds/mapready/v2.0.8/*

 24. In your regular subversion checkout (not your exported version), bump
     the version in include/asf_version.h and add "-dev" to the end, then
     commit the change to the repository.


MapReady v2.x Windows Release Build Procedure:
----------------------------------------------
    Notes:
      - The installer package is now called "mapreadyPackageInstall<VV>.nsi"
        where <VV> is the version number: e.g., "mapreadyPackageInstall20.nsi"

      - You must have Cygwin and the Nullsoft installer system installed on the
        build machine for this build step.

 * Make sure DEBUG_BUILD is not set to any particular debug level:

      unset DEBUG_BUILD

 * Build the ASF tools:

      cd <path>/asf_tools
      make clean
      make

 * Build akdem_grab manually.  From asf_tools directory:

            cd prototype/src/usgs_seamless
            make

    The Makefile should copy akdem_grab to ../../../bin automatically.

    If "make" fails because of an error in osl/socket.cpp (it did for me)
    then you probably need to do this:

            vi ../osl/socket.cpp
            --> comment out line 35: typedef int socklen_t;

 * Build the MapReady htmlhelp.chm manually and get it to the proper location.
   From the asf_tools directory:

 	cd src/asf_convert_gui
 	make htmlhelp.chm
 	make

 * Edit

    <path>/release/trunk/windows_installer/convert_package/mapreadyPackageInstall20.nsi

    and update the locations of the tool binaries and the cygwin
    binaries directories.  Look for the ASF_BINS_LOC and CYGWIN_BINS_LOC
    definitions respectively.

 * Build the Windows self-installing executable:

    a) In a Windows file manager window, right click on the script
       that you edited in the previous step and select 'Compile NSIS script'

    b) The installer is going to grab the cygwin1.dll file from
       ../support/cygwin (along with a bunch of other dlls).  You
       must test the self-installer on a Windows machine that does
       NOT have Cygwin installed on to verify that the cygwin1.dll
       file from this folder works with our code.  If not, then you
       should replace this cygwin1.dll file with the one from your
       Cygwin installation (c:/cygwin/bin/cygwin1.dll) and try
       again.  Ideally, you would also test the installer on a
       machine WITH Cygwin installed as well.

 * Create a zip and tarball of the generated binary (use Winzip, 7zip, or unix)

    Currently we are using the naming scheme:
       <package>-<V>.<V>.<V>-<OS>.<compression type>
       e.g.
       mapready-2.0.8-win32.zip
       mapready-2.0.8-win32.tar.gz

 * Put these files with the already packaged Linux and Source distributions to
   our favorite 'point release' locations using WinSCP and your favorite web
   browser. Then DQ can test this stuff!

     On Data Quality's machine at
       dq.asf.alaska.edu:/stor/dq/release_builds/mapready/v2.0.8

     And on our Wiki page
       http://wiki/asf/UTD_tools_page


SAR TRAINING PROCESSOR (STP) SOURCE AND RPM RELEASE PROCEDURE
-------------------------------------------------------------

* Check out the branched or trunk code to be released to a directory
  (e.g.~/asf/asf_tools). NOTE: You will perform an 'svn export' to obtain
  a copy of the tools for building the release later in this procedure.
    Trunk:
    > svn co svn+ssh://svn/svn/asf_tools/trunk asf_tools
    Or Branch:
    > svn co svn+ssh://svn/svn/asf_tools/branches/stp_v?-?-x asf_tools

* Update STP_VERSION in include/asf_version.h

* Tag the repository:
    Trunk:
    > svn copy svn+ssh://svn/svn/asf_tools/trunk \
               svn+ssh://svn/svn/asf_tools/tags/stp_v?-?-?
    Or Branch:
    > svn copy svn+ssh://svn/svn/asf_tools/branches/stp_v?-?-x \
               svn+ssh://svn/svn/asf_tools/tags/stp_v?-?-?

* Create a clean directory where you will produce the build (etc),
  for example:

    > mkdir ~/asf/svn-r<REVISION#>

* Export a copy of the release in the work directory:

    > cd ~/asf/svn-r<REVISION#>
    > svn export svn+ssh://svn/svn/asf_tools/tags/stp_v?-?-? asf_tools

* Check out autotar and rpmbuild into the work directory.

    > cd ~/asf/svn-r<REVISION#>
    > svn co svn+ssh://svn/svn/release/trunk/autotar release/autotar
    > svn co svn+ssh://svn/svn/release/trunk/rpmbuild release/rpmbuild

* Make working directories for autotar:

    > cd ~/asf/svn-r<REVISION#>
    > mkdir -p release/tar_filelist
    > mkdir -p release/tar

* Create the source.stp_package file:

    > cd ~/asf/svn-r<REVISION#>/asf_tools/make_support
    > make
    > ./makemake

* Run the autotar script:

    > cd ~/asf/svn-r<REVISION#>/release/autotar
    > ./tarfile src ~/asf/svn-r<REVISION#> stp_package

* Run the rpmprep script:

    > cd ~/asf/svn-r<REVISION#>/release/autotar
    > ./rpmprep stp_package stp

* Copy an older .spec file to the new one:

    > cd ~/asf/svn-r<REVISION#>/release/rpmbuild
    > cp <old .spec file> stp-?.?.?-1.spec

* Edit the new .spec file (stp-?.?.?-1.spec) to use the correct version.
  The version number to be edited should be on line 2:

    Text chunk:
      Summary: ASF SAR Training Processor
      Name: stp
      Version: ?.?.?
      Release: 1
      License: BSD

* If you have never copied the .rpmmacros and .rpmrc files to your
  home directory, then do so now:

    > cd ~/asf/svn-r<REVISION#>/release/rpmbuild
    > cp dot.rpmmacros ~/.rpmmacros
    > cp dot.rpmrc ~/.rpmrc

* Edit ~/.rpmmacros to update the top directory to the 'release' folder.
  Find the %_topdir line and  edit as follows:

    %_topdir      %(echo $HOME)/asf/svn-r<REVISION#>/release

* Make sure DEBUG_BUILD is not set to any particular debug level:

    > cd ~/asf/svn-r<REVISION#>/release/rpmbuild
    > unset DEBUG_BUILD

* Build the rpm:

    > rpmbuild -ba stp-?.?.?-1.spec

* Collect rpm & source tarball for Linux & Win32 distribution using the
  tarrpms script. This should put all the *.tar.gz & *.zip files you need
  in ~/asf/svn-r<REVISION#>/release/rpmbuild/Source and
  ~/asf/svn-r<REVISION#>/release/rpmbuild/RPMS:

    > cd ~/asf/svn-r<REVISION#>/release/rpmbuild
    > ./tarrpms stp stp

* Copy all the packages to our favorite archive location. The files you're
  sending should look something like this:
       stp-?.?.?-rpm.tar.gz
       stp-?.?.?-rpm.zip
       stp-?.?.?-src.tar.gz
       stp-?.?.?-src.zip

    > cd ~/asf/svn-r<REVISION#>/release/rpmbuild
    > scp ./dist/* dq:/stor/dq/release_builds/stp/?.?.?

* Let Data Quality know where stuff is for validation.
    DQ Lead:       Wade Albright (walbrigh@asf.alaska.edu, x1985)
    Master tester: Charley Slater (cslater@asf.alaska.edu, x5633)

* If it's been validated let the web person know to deliver it to the web
    Jeannine Haney <jhaney@asf.alaska.edu, x5793)

* Rejoice! For this task is done!



SAR TRAINING PROCESSOR (STP) WINDOWS RELEASE PROCEDURE
------------------------------------------------------

NOTE: it is assumed that you have already tagged the repository in preparation
      for this release you are about to do. The tagging procedure takes place
      in the first few steps source & rpm release procedure in case you'd like
      a reference.

* Make sure you've got these programs installed:
     * Cygwin
     * Nullsoft installer system
     * Tortoise SVN (or the svn that comes with cygwin,
       but only use one of these svns for your checkins, checkouts, etc,
       because they don't play very well together)

* Open a Cygwin terminal

* Check out the tagged version of the stp for release.

   > svn export svn+ssh://svn/svn/asf_tools/tags/stp_v?-?-? asf_tools

* If you've got another code tree that has already been built, and you're sure
  that the external libraries you have built already are the same as the
  tagged version you're about to check out, you can copy that into your
  tagged tree.

   > cp -r prebuilt/asf_tools/external tagged/asf_tools/.

* Make sure DEBUG_BUILD is not set to any particular debug level:

    > unset DEBUG_BUILD

* Build the ASF tools:

      cd <path>/asf_tools
      make clean
      make

* Edit
  <path>/release/trunk/windows_installer/stp_package/stpPackageInstall<??>.nsi
  where <??> is the version number (e.g. stpPackageInstall10.nsi) and update
  the locations of the tool binaries and the cygwin binaries directories. Look
  for the ASF_BINS_LOC and CYGWIN_BINS_LOC definitions respectively.

* Build the Windows self-installing executable:

    a) In a Windows file manager window, right click on the script
       that you edited in the previous step and select 'Compile NSIS script'

    b) The installer is going to grab the cygwin1.dll file from
       ../support/cygwin (along with a bunch of other dlls).  You
       must test the self-installer on a Windows machine that does
       NOT have Cygwin installed on to verify that the cygwin1.dll
       file from this folder works with our code.  If not, then you
       should replace this cygwin1.dll file with the one from your
       Cygwin installation (c:/cygwin/bin/cygwin1.dll) and try
       again.  Ideally, you would also test the installer on a
       machine WITH Cygwin installed as well.

* Create a tarball and zip of the generated binary. In Unix-land you can use
  tar czf for the tar.gz and the zip command for the .zip. On windows Winzip
  can take care of the .zip or 7zip can do both.
  The file to package should be at
  <path>\release\windows_installer\stp_package\STP_Setup.exe
  The tarballed and zipped file names should be formatted as follows where
  the ?s are version numbers:

    stp-?.?.?-win32.tar.gz
    stp-?.?.?-win32.zip

* Copy the packages (winSCP or FileZilla) to our archive location, currently:
    dq:/stor/dq/release_builds/stp/?.?.?

* Let Data Quality know where stuff is for validation.
    DQ Lead:       Wade Albright (walbrigh@asf.alaska.edu, x1985)
    Master tester: Charley Slater (cslater@asf.alaska.edu, x5633)

* If it's been validated let the web person know to deliver it to the web.
    Jeannine Haney <jhaney@asf.alaska.edu, x5793)

* Rejoice! For this task is done!


The User Tool Development Group's Release Procedure Instructions:
=================================================================

create_thumbs RPM Build Procedure:
----------------------------------
Note: The following example assumes version 2.0.2, subversion
  revision 7410, and a work folder at ~/asf.

NOTE: This release procedure assumes that create_thumbs is just
  one tool of many in the MapReady package (and repository) and
  that create_thumbs is to be released as a separate tool from
  within that package.  Once (or if) create_thumbs becomes a
  separate release, then this procedure will (somewhat obviously)
  change as well.

 1. Create a clean directory where you will produce the build (etc),
    for example (change the revision number to the one that you have
    checked out):

      mkdir ~/asf/svn-r7410ct

 2. Check out autotar and rpmbuild into this work directory.  Example:

      cd ~/asf/svn-r7410ct
      svn co svn+ssh://svn/svn/release/trunk/autotar release/autotar
      svn co svn+ssh://svn/svn/release/trunk/rpmbuild release/rpmbuild

 3. Make working directories:

      cd ~/asf/svn-r7410ct
      mkdir -p release/tar_filelist release/tar

 4. If you have never copied the .rpmmacros and .rpmrc files to your
    home directory, then do so now, otherwise skip to step 7:

      cd ~/asf/svn-r7410ct/release/rpmbuild
      cp dot.rpmmacros ~/.rpmmacros
      cp dot.rpmrc ~/.rpmrc

 5. Edit ~/.rpmmacros to update the top directory for your build's rpmbuild
    parent directory, i.e. the 'release' folder.  Find the %_topdir line and
    edit as follows:

      %_topdir      %(echo $HOME)/asf/svn-r7410ct/release

 6. Check out (export w/o SVN info) a copy of the release:

      cd ~/asf/svn-r7410ct
      svn export svn+ssh://svn/svn/asf_tools/trunk asf_tools

 7. Make sure DEBUG_BUILD is not set to any particular debug level:

      unset DEBUG_BUILD

 8. Meddle with what the packages will include you'll need to
     edit ~/asf/svn-r7410ct/asf_tools/make_support/master_program_list. That
     is where all the tools to be compiled are listed with other tools that they
     depend on.

     Here is what the LIBS list looks like (much removed, create_thumbs
     dependencies kept):

LIBS
{
@src/
        asf
        asf_fft
        libasf_proj
        asf_meta
        libasf_sar
        libasf_raster
        libasf_vector
        libasf_import
        libasf_ardop
        libasf_export
}

    And here is what the PROGRAMS list looks like:

PROGRAMS
{
@src/
        detect_cr { }
        image_stats { }
        meta_check { }
        offset_test { }
        pta { }
        create_thumbs { }

}

    And here is what the (now emptied) DOCUMENTATION list looks like:

DOCUMENTATION
{
@doc/

}

    And here is what the mapready and all package descriptions look like
    (NOTE: stp_package is emptied, mapready_package emptied and create_thumbs
    added to it, and the 'all' package added as shown below):

CATEGORIES
{
# MapReady package
        mapready_package
        {
                create_thumbs
        }

# SAR Training Processor
        stp_package
        {
        }

# Data quality tools
        dq-tools
        {
        }

# All
        all
        {
                mapready_package
        }

}


 9. ** KLUDGE #1 **
     Create svn_rev.h:

      cd ~/asf/svn-r7410ct/asf_tools/include
      echo "#define SVN_REV \"7410\"" > svn_rev.h

 10. ** KLUDGE #2 **
     Edit ~/asf/svn-r7410ct/asf_tools/Makefile.in and include only the
     following lines from the original MAPREADY_MODULES list:

MAPREADY_MODULES = \
        src/asf \
        src/libasf_proj \
        src/asf_meta \
        src/asf_fft \
        src/libasf_raster \
        src/libasf_sar \
        src/libasf_import \
        src/libasf_vector \
        src/libasf_export \
        src/libasf_ardop \
        src/create_thumbs

 11. Eliminate the following lines from Makefile.in.  At the time of writing
     these instructions, this line occurs in FIVE places: near line 140, 153,
     164, 175, and 186:

        echo "#define SVN_REV \"0`svn info|grep Revision|cut -c11-`\"">include/svn_rev.h

 12. Remove the mapready documentation from Makefile.in (since we are not
     building mapready).  Delete the following lines from Makefile.in (around
     lines 111-112) in the 'mapready:' build rules:

        cp doc/mapready_manual.pdf $(S_DOCDIR)
        cp doc/mapready-version_history.txt $(S_DOCDIR)

 13. In the list of modules to remove during a 'make clean', remove all
     packages other than the mapready package:

clean:
        rm -rf $(S_LIBDIR)
        rm -rf $(S_BINDIR)
        rm -rf $(S_DOCDIR)
        rm -rf $(S_SHAREDIR)
        rm -rf share
        rm -rf man
        $(foreach MODULE, $(MAPREADY_MODULES), \
                $(MAKE) clean -C $(MODULE) &&) true

 14. Finally, remove the line that makes an asf_convert soft link to
     asf_mapready.  Remove the following line (near line 110):

        ln -sf asf_mapready $(S_BINDIR)/asf_convert

 15. Create the source.create_thumbs file in ~/asf/svn-r7410ct/release/autotar
     (automatically by makemake if you followed the directory structure
     instructions listed here):

      cd ~/asf/svn-r7410/asf_tools/make_support
      make
      ./makemake

     NOTE: In this case, the source.mapready_package and source.create_thumbs
     files should be identical (check them with diff to make sure), so we'll
     just use the create_thumbs version from here on out ...for clarity.

 16. Run the autotar script:

      cd ~/asf/svn-r7410ct/release/autotar
      ./tarfile src ~/asf/svn-r7410ct create_thumbs

 17. Run the rpmprep script (from autotar folder):

      ./rpmprep create_thumbs asf_create_thumbs

 18. Copy an older .spec file to the new one, then edit the new .spec
     file in to use the correct version:

      cd ~/asf/svn-r7410ct/release/rpmbuild
      cp <old .spec file> asf_create_thumbs-1.3-1.spec
      vi asf_create_thumbs-1.3-1.spec

     NOTE: See example .spec file (below) at the end of these
       release procedures

 19. a) If you have not already added the secret and public gpg keys
     to your ~/.gnupg folder, then do so now or the rpm build will
     not sign the rpms.  Note that you CAN sign the rpms after they
     have been created with "rpm --addsign <rpm file name>".  Note that
     the first step below is unnessary if you already have a .gnupg
     folder in your home directory:

     mkdir ~/.gnupg
     cp dot.gnupg* ~/.gnupg
     cd ~/.gnupg
     gunzip *
     tar xvf *

     b) If the machine that you are using has not had the public key
     imported to the rpm public keys database yet, you will not be
     able to check your rpms to see if they were signed properly.
     Import the public key into the rpm public keys database as
     shown below (you must have root access).  Still in the rpmbuild
     folder ...do the following:

     cd ~/asf/svn-r7410ct/release/rpmbuild/public_key
     sudo rpm -import asf_tools-pubkey.asc

 20. Clean up any old rpm builds if necessary:

     cd ~/asf/svn-r7410ct/release/rpmbuild
     rm -rf BUILD/*
     rm -rf RPMS/*
     rm -rf SRPMS/*

 21. Build and check the rpm:

      cd ~/asf/svn-r7410ct/release/rpmbuild
      rpmbuild -ba --sign asf_create_thumbs-1.3-1.spec
      <password is 'bob'>

      OPTIONAL: Check the results of the rpm build:

      cd RPMS
      rpm -K asf_create_thumbs-1.3-1.i386.rpm
      rpm -qlp asf_create_thumbs-1.3-1.i386.rpm

     After the "rpm -K" command, you should see an 'OK' statement similar
     to the one below that indicates the rpm was properly signed:

      asf_create_thumbs-1.3-1.i386.rpm: (sha1) dsa sha1 md5 gpg OK

     If you get a response that includes the words "NOT OK", then it usually
     means the ASCII public key has not been imported with "rpm -import"
     yet.

     After the -qlp query, you'll get a long list of all that is contained
     in rpm ...useful for checking to make sure that no components were left
     out.

 22. Create tarballs of the rpms (the binary rpm will also contain the
     README_rpm.txt file from ~/asf/svn-r7410/asf_tools folder):

      cd ~/asf/svn-r7410ct/release/rpmbuild
      ./tarrpms asf_create_thumbs create_thumbs

 23. Put the built files on dq (still in ~/asf/svn-r7410/release/rpmbuild):

      mkdir /stor/dq/release_builds/create_thumbs/v1.3
      cp dist/* /stor/dq/release_builds/create_thumbs/v1.3
      chmod 777 /stor/dq/release_builds/create_thumbs/v1.3
      chmod 666 /stor/dq/release_builds/create_thumbs/v1.3/*


EXAMPLE .spec FILE CONTENTS (you can copy this and edit if necessary):
----------------------------------------------------------------------
Summary: ASF create_thumbs package
Name: asf_create_thumbs
Version: 1.5
Release: 1
License: BSD
Group: Applications/Scientific
URL: http://www.asf.alaska.edu
Source: asf_create_thumbs.src.tar.gz
BuildRoot: %{_buildroot}
Prefix: /usr/local

%description
This package contains create_thumbs (only), a tool
for creating thumbnails and browse images from SAR
files.  This is a subset of the ASF Remote Sensing
Toolkit.
%prep
%setup -q -n ${NAME}

%build
cd %{_builddir}/asf_tools
./configure --prefix=$RPM_BUILD_ROOT/usr/local
make

%install
rm -rf $RPM_BUILD_ROOT
cd %{_builddir}/asf_tools
make install
rm -rf $RPM_BUILD_ROOT/usr/local/lib

%clean
rm -rf $RPM_BUILD_ROOT

%files
%defattr(666,root,root,777)
%attr(-,root,root) /usr/local/bin
/usr/local/share

%changelog
* Wed Jul 09 2008 Brian Dixon <bdixon@asf.alaska.edu> - 1.5
- enhanced to allow RSAT and ERS data with missing frames to proceed

* Wed May 28 2008 Brian Dixon <bdixon@asf.alaska.edu> - 1.4
- minor bug fixes, cleaner handling of temporary files

* Sun Apr 27 2008 Brian Dixon <bdixon@asf.alaska.edu> - 1.3
- changed name of package to asf_create_thumbs

* Tue Apr 24 2008 Brian Dixon <bdixon@asf.alaska.edu> - 1.1.3-1
- create_thumbs (alone), JERS1 support added

* Tue Mar 26 2008 Brian Dixon <bdixon@asf.alaska.edu> - 1.1.2-1
- create_thumbs (alone)

* Tue Dec 04 2007 Brian Dixon <bdixon@asf.alaska.edu> - 1.0.0-1
- MapReady name change, new tools, new version series

* Mon Aug 13 2007 Kirk Hogenson <khogenso@asf.alaska.edu> - 3.2.0-1
- ALOS terrain correction

* Wed Feb 14 2007 Kirk Hogenson <khogenso@asf.alaska.edu> - 3.1.0-1
- ALOS release

* Tue Nov 7 2006 Kirk Hogenson <khogenso@asf.alaska.edu> - 3.0.0-1
- Update to 3.0

* Fri Mar 24 2006 Kirk Hogenson <khogenso@asf.alaska.edu> - 2.1.0-1
- Initial build.


