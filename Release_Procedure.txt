
The User Tool Development Group's Release Procedure Instructions:
=================================================================

MapReady v1.x RPM Build Procedure:
----------------------------------
Note: The following example assumes version 3.2.10, subversion
  revision 6472, and a work folder at ~/asf.

Note: The MapReady binaries are mapready and asf_mapready, but
  they are still built in the asf_convert_gui and asf_convert
  source folders respectively.  The executable and icon file (etc)
  files are renamed as they are copied to the bin and share folders.

 1. Check out the code to be released (if not already), i.e. branched version
    or the trunk, i.e. to ~/asf/asf_tools.  NOTE: You will perform an
    'svn export' to obtain a copy of the tools for building the release
    later in this procedure.

 2. Update the version number(s) in ~/asf/asf_tools/include/asf_version.h
    and commit the change to the subversion repository.  Example:

    a) CONVERT_PACKAGE_VERSION_STRING "3.2.10-dev"

        changes to

       CONVERT_PACKAGE_VERSION_STRING "3.2.10"

    b) svn ci

 3. Tag the repository:

      svn copy svn+ssh://svn/svn/asf_tools/trunk
               svn+ssh://svn/svn/asf_tools/tags/convert_v3-2-10

    [[ Or if tagging a branched revision --
      svn copy svn+ssh://svn/svn/asf_tools/branches/convert_v3-2-x
               svn+ssh://svn/svn/asf_tools/tags/convert_v3-2-10
    ]]

 4. Create a clean directory where you will produce the build (etc),
    for example (change the revision number to the one that you have
    checked out):

      mkdir ~/asf/svn-r6472

 5. Check out autotar and rpmbuild into this work directory.  Example:

      cd ~/asf/svn-r6472
      svn co svn+ssh://svn/svn/release/trunk/autotar release/autotar
      svn co svn+ssh://svn/svn/release/trunk/rpmbuild release/rpmbuild

 6. Make working directories:

      cd ~/asf/svn-r6472
      mkdir -p release/tar_filelist release/tar

 7. If you have never copied the .rpmmacros and .rpmrc files to your
    home directory, then do so now, otherwise skip to step 7:

      cd ~/asf/svn-r6472/release/rpmbuild
      cp dot.rpmmacros ~/.rpmmacros
      cp dot.rpmrc ~/.rpmrc

 8. Edit ~/.rpmmacros to update the top directory for your build's rpmbuild
    parent directory, i.e. the 'release' folder.  Find the %_topdir line and
    edit as follows:

      %_topdir      %(echo $HOME)/asf/svn-r6472/release

 9. Check out a copy of the release:

      cd ~/asf/svn-r6472
      svn export svn+ssh://svn/svn/asf_tools/tags/convert_v3-2-10 asf_tools

 10. Make sure DEBUG_BUILD is not set to any particular debug level:

      unset DEBUG_BUILD

 11. If you want to meddle with what the package will include you'll need to
     edit ~/asf/svn-r6472/asf_tools/make_support/master_program_list. That is
     where all the tools to be compiled are listed with other tools that they
     depend on.  There's also a CATEGORIES category in the master_program_list.
     You can make special groupings of tools in CATEGORIES section (eg 'mapready'
     which includes asf_mapready, mapready, asf_export, asf_import, etc.).

 12. ** KLUDGE #1 **
     Create svn_rev.h:

      cd ~/asf/svn-r6472/asf_tools/include
      echo "#define SVN_REV \"6472\"" > svn_rev.h

 13. ** KLUDGE #2 **
     Edit ~/asf/svn-r6472/asf_tools/Makefile.in, eliminate the following
     lines from the MODULES list:

      src/ardop \
      src/llh2ls \
      src/diffimage \
      src/diffmeta \
      src/gr2sr \

     Eliminate the following lines from Makefile.in.  At the time of writing
     these instructions, this line occurs in FOUR places: near line 117, 130,
     141, and 152:

      echo "#define SVN_REV \"0`svn info|grep Revision|cut -c11-`\"">include/svn_rev.h

 14. Create the source.mapready_package file in ~/asf/svn-r6472/releast/autotar
     (automatically by makemake if you followed the directory structure
     instructions listed here):

      cd ~/asf/svn-r6472/asf_tools/make_support
      make
      ./makemake

 15. ** KLUDGE #4 **
    Add missing tools to the source.mapready_package file:

      cd ~/asf/svn-r6472/release/autotar

    Edit release/autotar/source.mapready_package, adding these items:

src/libasf_insar
external
src/asf_convert_gui
src/metadata_gui
src/gr2sr
src/sr2gr
src/mosaic
src/refine_geolocation
src/asf_terrcorr
src/meta2envi
src/resample
src/fill_holes
src/asf_view
src/to_sr
src/convert2vector
src/deskew
src/create_thumbs
src/shift_geolocation
src/trim
src/proj2proj
src/sgpsdp
doc

 16. Run the autotar script:

      cd ~/asf/svn-r6472/release/autotar
      ./tarfile src ~/asf/svn-r6472 mapready_package

 17. Run the rpmprep script (from autotar folder):

      ./rpmprep mapready_package asf_mapready

 18. Copy an older .spec file to the new one, then edit the new .spec
     file in to use the correct version:

      cd ~/asf/svn-r6472/release/rpmbuild
      cp <old .spec file> asf_mapready-1.0.0-1.spec
      vi asf_mapready-1.0.0-1.spec

 19. Save the new .spec file in the repository:

      svn ci asf_mapready-1.0.0-1.spec

 20. a) If you have not already added the secret and public gpg keys
     to your ~/.gnupg folder, then do so now or the rpm build will
     not sign the rpms.  Note that you CAN sign the rpms after they
     have been created with "rpm --addsign <rpm file name>".  Note that
     the first step below is unnessary if you already have a .gnupg
     folder in your home directory:

     mkdir ~/.gnupg
     cp dot.gnupg* ~/.gnupg
     cd ~/.gnupg
     gunzip *
     tar xvf *

     b) If the machine that you are using has not had the public key
     imported to the rpm public keys database yet, you will not be
     able to check your rpms to see if they were signed properly.
     Import the public key into the rpm public keys database as
     shown below (you must have root access).  Still in the rpmbuild
     folder ...do the following:

     cd public_key
     sudo rpm -import asf_tools-pubkey.asc

 21. Build and check the rpm (still in ~/asf/svn-r6472/release/rpmbuild):

      rpmbuild -ba --sign asf_mapready-1.0.0-1.spec
      cd RPMS
      rpm -K  asf_mapready-1.0.0-0.i386.rpm

     After the "rpm -K" command, you should see an 'OK' statement similar
     to the one below that indicates the rpm was properly signed:

      asf_mapready-1.0.0-0.i386.rpm: (sha1) dsa sha1 md5 gpg OK

     If you get a response that includes the words "NOT OK", then it usually
     means the ASCII public key has not been imported with "rpm -import"
     yet.

 22. Create tarballs of the rpms (the binary rpm will also contain the
     README_rpm.txt file from ~/asf/svn-r6472/asf_tools folder) (still in
     ~/asf/svn-r6472/release/rpmbuild):

      ./tarrpms asf_mapready mapready

 23. **OPTIONAL**
     I like to do this:

      mv ~/asf/svn-r6472 ~/asf/mapready-v1.0.0

 23. Put the built files on dq (still in ~/asf/svn-r6472/release/rpmbuild):

      mkdir /stor/dq/release_builds/mapready/v3.2.10
      cp RPMS/mapready-1.0.0-rpm.* Source/mapready-1.0.0-src.*
          /stor/dq/release_builds/mapready/v3.2.10
      chmod 755 /stor/dq/release_builds/mapready/v3.2.10
      chmod 644 /stor/dq/release_builds/mapready/v3.2.10*

 24. In your regular subversion checkout (not your exported version), bump
     the version in include/asf_version.h and add "-dev" to the end, then
     commit the change to the repository.


MapReady v1.x Windows Release Build Procedure:
----------------------------------------------
    Notes:
      - The installer package is now called "mapreadyPackageInstall<VV>.nsi"
        where <VV> is the version number: e.g., "mapreadyPackageInstall32.nsi"

      - You must have Cygwin and the Nullsoft installer system installed on the
        build machine for this build step.

 1. Make sure DEBUG_BUILD is not set to any particular debug level:

      unset DEBUG_BUILD

 2. Build the ASF tools:

      cd <path>/asf_tools
      make clean
      make

 3. Build akdem_grab manually.  From asf_tools directory:

            cd prototype/src/usgs_seamless
            make

    The Makefile will copy akdem_grab to ../../../bin automatically.

    If "make" fails because of an error in osl/socket.cpp (it did for me)
    then you probably need to do this:

            vi ../osl/socket.cpp
            --> comment out line 35: typedef int socklen_t;

 4. Edit

    <path>/release/trunk/windows_installer/convert_package/mapreadyPackageInstall10.nsi

    and update the locations of the tool binaries and the cygwin
    binaries directories.  Look for the ASF_BINS_LOC and CYGWIN_BINS_LOC
    definitions respectively.

 5. Build the Windows self-installing executable:

    a) In a Windows file manager window, right click on the script
       that you edited in the previous step and select 'Compile NSIS script'

    b) The installer is going to grab the cygwin1.dll file from
       ../support/cygwin (along with a bunch of other dlls).  You
       must test the self-installer on a Windows machine that does
       NOT have Cygwin installed on to verify that the cygwin1.dll
       file from this folder works with our code.  If not, then you
       should replace this cygwin1.dll file with the one from your
       Cygwin installation (c:/cygwin/bin/cygwin1.dll) and try
       again.  Ideally, you would also test the installer on a
       machine WITH Cygwin installed as well.

 6. Create a tarball of the generated binary

    Currently we are using the naming scheme:
       tar czvf mapready.<version_number>.bin.win32.tar.gz
           ASF_MapReady_Setup.exe

 7. The current procedure for delivery onto the web (this procedure
    could easily change while leaving the rest of this document mostly
    correct) is to upload to the machine 'seth'.  Login with username
    'asfsw' and password '[web_g00nz]'.  Then do the following:

       cd Incoming/
       mkdir v<version_number>

    Now log back out and do:

       scp <tarball> asfsw@seth.asf.alaska.edu:/Incoming/v<version_number>/

    Now be sure to tell the web monkey (currently Charley Slater) that
    its there and waiting for him!



SAR TRAINING PROCESSOR (STP) SOURCE AND RPM RELEASE PROCEDURE
-------------------------------------------------------------

* Check out the branched or trunk code to be released to a directory
  (e.g.~/asf/asf_tools). NOTE: You will perform an 'svn export' to obtain
  a copy of the tools for building the release later in this procedure.
    Trunk:
    > svn co svn+ssh://svn/svn/asf_tools/trunk asf_tools
    Or Branch:
    > svn co svn+ssh://svn/svn/asf_tools/branches/stp_v?-?-x asf_tools

* Update STP_VERSION in include/asf_version.h

* Tag the repository:
    Trunk:
    > svn copy svn+ssh://svn/svn/asf_tools/trunk \
               svn+ssh://svn/svn/asf_tools/tags/stp_v?-?-?
    Or Branch:
    > svn copy svn+ssh://svn/svn/asf_tools/branches/stp_v?-?-x \
               svn+ssh://svn/svn/asf_tools/tags/stp_v?-?-?

* Create a clean directory where you will produce the build (etc),
  for example:

    > mkdir ~/asf/svn-r<REVISION#>

* Export a copy of the release in the work directory:

    > cd ~/asf/svn-r<REVISION#>
    > svn export svn+ssh://svn/svn/asf_tools/tags/stp_v?-?-? asf_tools

* Check out autotar and rpmbuild into the work directory.

    > cd ~/asf/svn-r<REVISION#>
    > svn co svn+ssh://svn/svn/release/trunk/autotar release/autotar
    > svn co svn+ssh://svn/svn/release/trunk/rpmbuild release/rpmbuild

* Make working directories for autotar:

    > cd ~/asf/svn-r<REVISION#>
    > mkdir -p release/tar_filelist
    > mkdir -p release/tar

* Create the source.stp_package file:

    > cd ~/asf/svn-r<REVISION#>/asf_tools/make_support
    > make
    > ./makemake

* Run the autotar script:

    > cd ~/asf/svn-r<REVISION#>/release/autotar
    > ./tarfile src ~/asf/svn-r<REVISION#> stp_package

* Run the rpmprep script:

    > cd ~/asf/svn-r<REVISION#>/release/autotar
    > ./rpmprep stp_package stp

* Copy an older .spec file to the new one:

    > cd ~/asf/svn-r<REVISION#>/release/rpmbuild
    > cp <old .spec file> stp-?.?.?-1.spec

* Edit the new .spec file (stp-?.?.?-1.spec) to use the correct version.
  The version number to be edited should be on line 2:

    Text chunk:
      Summary: ASF SAR Training Processor
      Name: stp
      Version: ?.?.?
      Release: 1
      License: BSD

* If you have never copied the .rpmmacros and .rpmrc files to your
  home directory, then do so now:

    > cd ~/asf/svn-r<REVISION#>/release/rpmbuild
    > cp dot.rpmmacros ~/.rpmmacros
    > cp dot.rpmrc ~/.rpmrc

* Edit ~/.rpmmacros to update the top directory to the 'release' folder.
  Find the %_topdir line and  edit as follows:

    %_topdir      %(echo $HOME)/asf/svn-r<REVISION#>/release

* Make sure DEBUG_BUILD is not set to any particular debug level:

    > cd ~/asf/svn-r<REVISION#>/release/rpmbuild
    > unset DEBUG_BUILD

* Build the rpm:

    > rpmbuild -ba stp-?.?.?-1.spec

* Collect rpm & source tarball for Linux & Win32 distribution using the
  tarrpms script. This should put all the *.tar.gz & *.zip files you need
  in ~/asf/svn-r<REVISION#>/release/rpmbuild/Source and
  ~/asf/svn-r<REVISION#>/release/rpmbuild/RPMS:

    > cd ~/asf/svn-r<REVISION#>/release/rpmbuild
    > ./tarrpms stp stp

* Copy all the packages to our favorite archive location. The files you're
  sending should look something like this:
       stp-?.?.?-rpm.tar.gz
       stp-?.?.?-rpm.zip
       stp-?.?.?-src.tar.gz
       stp-?.?.?-src.zip

    > cd ~/asf/svn-r<REVISION#>/release/rpmbuild
    > scp ./dist/* dq:/stor/dq/release_builds/stp/?.?.?

* Let Data Quality know where stuff is for validation.
    DQ Lead:       Wade Albright (walbrigh@asf.alaska.edu, x1985)
    Master tester: Charley Slater (cslater@asf.alaska.edu, x5633)

* If it's been validated let the web person know to deliver it to the web
    Jeannine Haney <jhaney@asf.alaska.edu, x5793)

* Rejoice! For this task is done!



SAR TRAINING PROCESSOR (STP) WINDOWS RELEASE PROCEDURE
------------------------------------------------------

NOTE: it is assumed that you have already tagged the repository in preparation
      for this release you are about to do. The tagging procedure takes place
      in the first few steps source & rpm release procedure in case you'd like
      a reference.

* Make sure you've got these programs installed:
     * Cygwin
     * Nullsoft installer system
     * Tortoise SVN (or the svn that comes with cygwin,
       but only use one of these svns for your checkins, checkouts, etc,
       because they don't play very well together)

* Open a Cygwin terminal

* Check out the tagged version of the stp for release.

   > svn export svn+ssh://svn/svn/asf_tools/tags/stp_v?-?-? asf_tools

* If you've got another code tree that has already been built, and you're sure
  that the external libraries you have built already are the same as the
  tagged version you're about to check out, you can copy that into your
  tagged tree.

   > cp -r prebuilt/asf_tools/external tagged/asf_tools/.

* Make sure DEBUG_BUILD is not set to any particular debug level:

    > unset DEBUG_BUILD

* Build the ASF tools:

      cd <path>/asf_tools
      make clean
      make

* Edit
  <path>/release/trunk/windows_installer/stp_package/stpPackageInstall<??>.nsi
  where <??> is the version number (e.g. stpPackageInstall10.nsi) and update
  the locations of the tool binaries and the cygwin binaries directories. Look
  for the ASF_BINS_LOC and CYGWIN_BINS_LOC definitions respectively.

* Build the Windows self-installing executable:

    a) In a Windows file manager window, right click on the script
       that you edited in the previous step and select 'Compile NSIS script'

    b) The installer is going to grab the cygwin1.dll file from
       ../support/cygwin (along with a bunch of other dlls).  You
       must test the self-installer on a Windows machine that does
       NOT have Cygwin installed on to verify that the cygwin1.dll
       file from this folder works with our code.  If not, then you
       should replace this cygwin1.dll file with the one from your
       Cygwin installation (c:/cygwin/bin/cygwin1.dll) and try
       again.  Ideally, you would also test the installer on a
       machine WITH Cygwin installed as well.

* Create a tarball and zip of the generated binary. In Unix-land you can use
  tar czf for the tar.gz and the zip command for the .zip. On windows Winzip
  can take care of the .zip or 7zip can do both.
  The file to package should be at
  <path>\release\windows_installer\stp_package\STP_Setup.exe
  The tarballed and zipped file names should be formatted as follows where
  the ?s are version numbers:

    stp-?.?.?-win32.tar.gz
    stp-?.?.?-win32.zip

* Copy the packages (winSCP or FileZilla) to our archive location, currently:
    dq:/stor/dq/release_builds/stp/?.?.?

* Let Data Quality know where stuff is for validation.
    DQ Lead:       Wade Albright (walbrigh@asf.alaska.edu, x1985)
    Master tester: Charley Slater (cslater@asf.alaska.edu, x5633)

* If it's been validated let the web person know to deliver it to the web.
    Jeannine Haney <jhaney@asf.alaska.edu, x5793)

* Rejoice! For this task is done!

