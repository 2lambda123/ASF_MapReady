#!/bin/sh
# ASF Software Automatic Configuration script:
# Creates the top level Makefile which builds our tools.

# Exit immediately if command returns non-zero.
set -e

# If given --batch command line option, try to run noninteractively.
if [ "$1" = "--batch" ]; then
    batch_mode="true"
else
    batch_mode="false"
fi

echo "############ Determining operating system ###############"
cc="cc"
osType=`uname`
if [ -z $osType ]; then
	# No uname!  Must ask user.
	echo "Could not match your system automatically..."
	# Could be Next or something:
	printf "Please enter your system type (linux, next, etc.): "
	read sys
	echo "Configuring for " $sys "."
	osType=$sys
else
	versMajor=`uname -r | awk -F. '{print $1}'`
	versMinor=`uname -r | awk -F. '{print $2}'`
fi

ranlib="@echo do not need to run ranlib on this system on file: "
optFlag="-O"
case "${osType}:${versMajor}:${versMinor}" in
	IRIX*:5:*)
		sys="irix5x" ;;
	IRIX*:*:*)
		sys="irix" 
		optFlag="-O -n32";;
	SunOS:4:*)
		sys="sunos"
		ranlib="ranlib"
		cc="gcc" ;;
	SunOS:*:*)
		sys="solaris" ;;
	AIX*:*:*)
		sys="aix" ;;
	ULTRIX:*:*)
		sys="ultrix" ;;
	OSF1:*:*)
		sys="osf1" ;;
	HP-UX:*:*)
		sys="hpux" ;;
	*BSD:*:*)
		sys="bsd" ;;
	GNU:*:*)
		sys="gnu" ;;
	Linux:*:*)
		sys="linux" ;;
	Mach:*:*)
		sys="mach" ;;
	CYGWIN*:*:*)
		sys="win32"
		makeExtra="BIN_POSTFIX = .exe";;
	*:*:*)
		sys=$osType ;;
esac

# Make the install directories for the libraries and binaries.
if [ ! -d lib ]; then
    mkdir lib
fi
if [ ! -d lib/$sys ]; then
    mkdir lib/$sys
fi
if [ ! -d bin ]; then
    mkdir bin/
fi
if [ ! -d bin/$sys ]; then
    mkdir bin/$sys
fi
if [ ! -d java ]; then
    mkdir java/
fi

######## Ask about GCC ############
if [ ! $cc = "gcc" -a ! $batch_mode = "true" ]; then
    printf "Would you like to use the GNU C Compiler 'gcc' (y/n)? "
    read resp
    if [ $resp = "y" -o $resp = "Y" -o $resp = "yes" ]; then
        cc="gcc"
	optFlag="-O"
    fi
else
    cc="gcc"
    optFlag="-O"
fi     

asfDir=`pwd`

echo "########## Determining machine characteristics #############"
cd make_support
$cc -o endian endian.c
./endian

echo "########### Building the make_support/system_rules file ###############"

# write make_support/system_rules file header
cat <<EOF >system_rules
############### System_rules: ###############
# Contains information about the current machine.
# This file was automatically created by 'asf_tools/config'
# And is included by each program's Makefile.
#

EOF

# write make_support/system_rules ENDIAN_FLAGS
./endian -r >> system_rules
rm -f ./endian

# EOF (without quotes) makes cat print out strings with expanded variables
cat <<EOF >>system_rules
SYS     = $sys
CC      = $cc
RANLIB  = $ranlib
OPTFLAG = $optFlag
EOF
# 'EOF' (with quotes) makes cat print out literal strings (no expanded variables [$])
cat <<'EOF' >>system_rules
ASF_INCLUDE_DIR = ../../include
INCLUDE = -I. -I$(ASF_INCLUDE_DIR)
# Flags to support large (> 2GB) files.  These must precede all include options.
LARGEFILE_FLAGS = -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64
FLAGS   = $(LARGEFILE_FLAGS) $(INCLUDE) $(OPTFLAG) -D$(SYS) $(ENDIAN_FLAGS)
# If compiler is gcc we're going to add some debugging flags/libraries
#   if <make 'DEBUG_BUILD=1'>  apply debugging tags and show all compiler warnings
#   if <make 'DEBUG_BUILD=2'>  do the same and add the electric fence library
ifeq ($(CC),gcc)
  ifeq ($(DEBUG_BUILD),1)
    OPTFLAG    =
    DEBUGFLAGS = -Wall -g
  endif
  ifeq ($(DEBUG_BUILD),2)
    OPTFLAG    =
    DEBUGFLAGS = -Wall -g
    DEBUGLIBS  = -lefence
  endif
endif

CFLAGS  = $(FLAGS) $(DEBUGFLAGS)
LDFLAGS = $(DEBUGLIBS)
LIBDIR  = ../../lib/$(SYS)
BINDIR  = ../../bin/$(SYS)
JAVADIR = ../../java
EOF

echo "$makeExtra" >>system_rules

# Look for the X-Windows directory
for xdir in `echo /usr /usr/openwin /usr/X /usr/X11 /usr/X11R6`
do
	if [ -r $xdir/lib/libX11.so ]
	then
		# linux needs to know about the /lib directory
		if [ $sys = "linux" ]
		then
			echo "XHOME   = ${xdir}/lib" >> system_rules
		else
			echo "XHOME   = ${xdir}" >> system_rules
		fi
		break
	fi
done

echo "########### Building the Makefile ###############"
make CC=$cc
./makemake $sys
cd ..

echo "########### Automatic configuration complete ###########"
directory=$asfDir'/bin/'$sys'/'
echo ""
echo "The ASF tools Makefile is now fully prepared."
echo ""
echo "To use the programs, you must add the binaries "
echo "  directory to your path: "$directory" "
echo ""
echo "To build the tools, type 'make'."
echo ""
echo "######### Source Installation Complete.  ##########"
