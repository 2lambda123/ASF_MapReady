#!/bin/sh
# ASF Software Automatic Configuration script:
# Creates the top level Makefile which builds our tools.

# Exit immediately if command returns non-zero.
set -e

# If given --batch command line option, try to run noninteractively.
if [ "$1" = "--batch" ]; then
    batch_mode="true"
else
    batch_mode="false"
fi

echo "############ Determining operating system ###############"
cc="cc"
osType=`uname`
versMajor=`uname -r | awk -F. '{print $1}'`
versMinor=`uname -r | awk -F. '{print $2}'`

ranlib="@echo do not need to run ranlib on this system on file: "
optFlag="-O"
case "${osType}:${versMajor}:${versMinor}" in
	IRIX*:*:*)
		sys="irix"
		optFlag="-O -n32";;
	SunOS:*:*)
		sys="solaris" ;;
	Linux:*:*)
		sys="linux" ;;
	CYGWIN*:*:*)
		sys="win32"
		makeExtra="BIN_POSTFIX = .exe" ;;
	*:*:*)
		echo "ASF tools are only supported on IRIX, Solaris, Linux, and Windows (Cygwin)"
		echo "Your system appears to be '" $osType "'."
		echo "Exiting..."
		exit 1 ;;
esac

# Make the install directories for the libraries and binaries.
if [ ! -d lib ]; then
    mkdir lib
fi
if [ ! -d lib/$sys ]; then
    mkdir lib/$sys
fi
if [ ! -d bin ]; then
    mkdir bin/
fi
if [ ! -d bin/$sys ]; then
    mkdir bin/$sys
fi
if [ ! -d java ]; then
    mkdir java/
fi

######## Ask about GCC ############
if [ ! $cc = "gcc" -a ! $batch_mode = "true" ]; then
    printf "Would you like to use the GNU C Compiler 'gcc' (y/n)? "
    read resp
    if [ $resp = "y" -o $resp = "Y" -o $resp = "yes" ]; then
        cc="gcc"
	optFlag="-O"
    fi
else
    cc="gcc"
    optFlag="-O4"
fi

asfDir=`pwd`

if [ $sys = "win32" ]; then
    glib_inc=""
    glib_lib="\$(LIBDIR)/libglib-2.0.dll.a"
else
    glib_inc="\$(shell pkg-config --cflags-only-I glib-2.0)"
    glib_lib="\$(shell pkg-config --libs glib-2.0)"
fi

echo "########## Determining machine characteristics #############"
cd make_support
$cc -o endian endian.c
./endian

echo "########### Building the make_support/system_rules file ###############"

# write make_support/system_rules file header
cat <<EOF >system_rules
############### System_rules: ###############
# Contains information about the current machine.
# This file was automatically created by 'asf_tools/config'
# And is included by each program's Makefile.
#

EOF

# write make_support/system_rules ENDIAN_FLAGS
./endian -r >> system_rules
rm -f ./endian

# EOF (without quotes) makes cat print out strings with expanded variables
cat <<EOF >>system_rules
SYS     = $sys
CC      = $cc
RANLIB  = $ranlib
OPTFLAG = $optFlag
GLIB_INCLUDE = $glib_inc
GLIB_LIB = $glib_lib
EOF
# 'EOF' (with quotes) makes cat print out literal strings (no expanded variables [$])
cat <<'EOF' >>system_rules
ASF_INCLUDE_DIR = ../../include
INCLUDE = -I. -I$(ASF_INCLUDE_DIR)
# Flags to support large (> 2GB) files.  These must precede all include options.
LARGEFILE_FLAGS = -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64
FLAGS   = -D_ISOC99_SOURCE $(LARGEFILE_FLAGS) $(INCLUDE) $(OPTFLAG) -D$(SYS) $(ENDIAN_FLAGS)
# If compiler is gcc we're going to add some debugging flags/libraries
#   if <make 'DEBUG_BUILD=1'>  apply debugging tags and show all compiler warnings
#   if <make 'DEBUG_BUILD=2'>  do the same and add the electric fence library
ifeq ($(CC),gcc)
  ifeq ($(DEBUG_BUILD),1)
    OPTFLAG    =
    DEBUGFLAGS = -Wall -g3
  endif
  ifeq ($(DEBUG_BUILD),2)
    OPTFLAG    =
    DEBUGFLAGS = -Wall -g3
    DEBUGLIBS  = -lefence
  endif
endif

CFLAGS  = $(FLAGS) $(DEBUGFLAGS)
LDFLAGS = $(DEBUGLIBS)
LIBDIR  = ../../lib/$(SYS)
BINDIR  = ../../bin/$(SYS)
JAVADIR = ../../java

EOF

echo "$makeExtra" >>system_rules

# Look for the X-Windows directory
for xdir in `echo /usr /usr/openwin /usr/X /usr/X11 /usr/X11R6`
do
	if [ -r $xdir/lib/libX11.so -o -r $xdir/lib/libX11.dll.a ]
	then
		# linux needs to know about the /lib directory
		if [ $sys = "linux" -o $sys = "win32" ]
		then
			echo "XHOME   = ${xdir}/lib" >> system_rules
		else
			echo "XHOME   = ${xdir}" >> system_rules
		fi
		break
	fi
done


echo "########### Building the Makefile ###############"
make CC=$cc
./makemake $sys
cd ..

echo "########### Automatic configuration complete ###########"
directory=$asfDir'/bin/'$sys'/'
echo ""
echo "The ASF tools Makefile is now fully prepared."
echo ""
echo "To use the programs, you must add the binaries "
echo "  directory to your path: "$directory" "
echo ""
echo "To build the tools, type 'make'."
echo ""
echo "To build the GUI, type 'make gui'."
echo "The GUI requires that you've installed GTK 2.4."
echo ""
echo "########### Build system is now configured  ############"
