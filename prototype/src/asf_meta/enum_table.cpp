/** Enum-to-string tables automatically generated by enum_parse.pl from enum.h--
   DO NOT EDIT THIS FILE!  Edit enum.h and re-run enum_parse.pl instead!
enum_parse.pl last regenerated this file on Thu Jul 13 23:27:07 AKDT 2006
*/
#include "asf_meta/util.h"
#include "asf_meta/enum.h"
const asf::enum_value_description_t asf::data_type_t_table[]={
  { BYTE,	"BYTE",	"8-bit unsigned integer; \"unsigned char\" on most systems."},
  { INTEGER16,	"INTEGER16",	"16-bit signed integer; \"short int\" on most systems."},
  { INTEGER32,	"INTEGER32",	"32-bit signed integer; \"int\" on most systems."},
  { REAL32,	"REAL32",	"32-bit IEEE floating-point; \"float\" (sign bit, 8 bit exponent, 23 bit mantissa)"},
  { REAL64,	"REAL64",	"64-bit IEEE floating-point; \"double\" (sign bit, 11 bit exponent, 52 bit mantissa)"},
  { COMPLEX_BYTE,	"COMPLEX_BYTE",	"two 8-bit signed values: real first, then imaginary"},
  { COMPLEX_INTEGER16,	"COMPLEX_INTEGER16",	"two 16-bit signed values: real first, then imaginary"},
  { COMPLEX_INTEGER32,	"COMPLEX_INTEGER32",	"two 32-bit signed values: real first, then imaginary"},
  { COMPLEX_REAL32,	"COMPLEX_REAL32",	"two 32-bit float values: real first, then imaginary"},
  { COMPLEX_REAL64,	"COMPLEX_REAL64",	"two 64-bit double values: real first, then imaginary"},
  {-1,"Unknown_value","Unknown enum value"}
}; /* end table for data_type_t */

const asf::enum_value_description_t asf::image_data_type_t_table[]={
  { RAW_IMAGE,	"RAW_IMAGE",	"Level 0 raw signal data (STF or CEOS)"},
  { COMPLEX_IMAGE,	"COMPLEX_IMAGE",	"Level 1 (processed) complex data"},
  { AMPLITUDE_IMAGE,	"AMPLITUDE_IMAGE",	"Amplitude image"},
  { PHASE_IMAGE,	"PHASE_IMAGE",	"Phase image (e.g. interferogram)"},
  { POWER_IMAGE,	"POWER_IMAGE",	"Power (magnitude) image"},
  { SIGMA_IMAGE,	"SIGMA_IMAGE",	"Sigma image (calibrated amplitude) [dB]"},
  { GAMMA_IMAGE,	"GAMMA_IMAGE",	"Gamma image (calibrated amplitude) [dB]"},
  { BETA_IMAGE,	"BETA_IMAGE",	"Beta image (calibrated amplitude) [dB]"},
  { COHERENCE_IMAGE,	"COHERENCE_IMAGE",	"Coherence image"},
  { GEOCODED_IMAGE,	"GEOCODED_IMAGE",	"Geocoded image (DEPRECATED--check projection type)"},
  { LUT_IMAGE,	"LUT_IMAGE",	"Lookup table"},
  { ELEVATION,	"ELEVATION",	"Pixels correspond to elevations, but may be slant range"},
  { DEM,	"DEM",	"Digital elevation model"},
  { IMAGE,	"IMAGE",	"Unknown image."},
  {-1,"Unknown_value","Unknown enum value"}
}; /* end table for image_data_type_t */

const asf::enum_value_description_t asf::projection_type_t_table[]={
  { UNIVERSAL_TRANSVERSE_MERCATOR,	"UNIVERSAL_TRANSVERSE_MERCATOR",	"Extremely common map projection.  Lowest distortion at the equator."},
  { POLAR_STEREOGRAPHIC,	"POLAR_STEREOGRAPHIC",	"Rather uncommon map projection; lowest distortion is at the poles."},
  { ALBERS_EQUAL_AREA,	"ALBERS_EQUAL_AREA",	"Complicated but portable map projection."},
  { LAMBERT_CONFORMAL_CONIC,	"LAMBERT_CONFORMAL_CONIC",	"The common \"Lambert\" projection."},
  { LAMBERT_AZIMUTHAL_EQUAL_AREA,	"LAMBERT_AZIMUTHAL_EQUAL_AREA",	"Rarely used variant of Lambert projection."},
  { STATE_PLANE,	"STATE_PLANE",	"Each US state legally defines its own separate projection"},
  { SCANSAR_PROJECTION,	"SCANSAR_PROJECTION",	"Along-track/across-track is a ScanSAR-specific, JPL-defined projection"},
  { LAT_LONG_PSEUDO_PROJECTION,	"LAT_LONG_PSEUDO_PROJECTION",	"X is proportional to longitude; Y is proportional to latitude.  Used heavily by USGS."},
  { SLANT_RANGE_PROJECTION,	"SLANT_RANGE_PROJECTION",	"\"Slant range\" SAR image: x axis is distance from satellite, y axis is time."},
  { GROUND_RANGE_PROJECTION,	"GROUND_RANGE_PROJECTION",	"\"Ground range\" SAR image: doppler deskewed, and corrected to spherical earth."},
  { UNKNOWN_INVALID_PROJECTION,	"UNKNOWN_INVALID_PROJECTION",	""},
  {-1,"Unknown_value","Unknown enum value"}
}; /* end table for projection_type_t */

const asf::enum_value_description_t asf::spheroid_type_t_table[]={
  { BESSEL_SPHEROID,	"BESSEL_SPHEROID",	""},
  { CLARKE1866_SPHEROID,	"CLARKE1866_SPHEROID",	""},
  { CLARKE1880_SPHEROID,	"CLARKE1880_SPHEROID",	""},
  { GEM6_SPHEROID,	"GEM6_SPHEROID",	""},
  { GEM10C_SPHEROID,	"GEM10C_SPHEROID",	""},
  { GRS1980_SPHEROID,	"GRS1980_SPHEROID",	""},
  { INTERNATIONAL1924_SPHEROID,	"INTERNATIONAL1924_SPHEROID",	""},
  { INTERNATIONAL1967_SPHEROID,	"INTERNATIONAL1967_SPHEROID",	""},
  { WGS72_SPHEROID,	"WGS72_SPHEROID",	""},
  { WGS84_SPHEROID,	"WGS84_SPHEROID",	""},
  {-1,"Unknown_value","Unknown enum value"}
}; /* end table for spheroid_type_t */

const asf::enum_value_description_t asf::datum_type_t_table[]={
  { EGM96_DATUM,	"EGM96_DATUM",	"Earth Gravity Model 1996 (spheroid: WGS84)"},
  { ED50_DATUM,	"ED50_DATUM",	"European Datum 1950 (International 1924)"},
  { ETRF89_DATUM,	"ETRF89_DATUM",	"European Terrestrial Reference Frame 1989 (WGS84)"},
  { ETRS89_DATUM,	"ETRS89_DATUM",	"European Terrestrial Reference System 1989 (GRS 1980)"},
  { ITRF_DATUM,	"ITRF_DATUM",	"International Terrestrial Reference Frame (GRS 1980)"},
  { NAD27_DATUM,	"NAD27_DATUM",	"North American Datum 1927 (Clarke 1866)"},
  { NAD83_DATUM,	"NAD83_DATUM",	"North American Datum 1983 (GRS 1980)"},
  { WGS72_DATUM,	"WGS72_DATUM",	"World Geodetic System 1972 (WGS72)"},
  { WGS84_DATUM,	"WGS84_DATUM",	"World Geodetic System 1984 (WGS84)"},
  {-1,"Unknown_value","Unknown enum value"}
}; /* end table for datum_type_t */

const asf::enum_value_description_t asf::metadata_1D_enum_table[]={
  { METADATA_1D_FIRST,	"METADATA_1D_FIRST",	"Start of metadata enum"},
  { TIME_SINCE_START,	"TIME_SINCE_START",	"Time of this point's aquisition relative to image start (seconds)"},
  { TIME_SECONDS_OF_DAY,	"TIME_SECONDS_OF_DAY",	"Time of this point since midnight UTC (seconds).  This value will not jump around across midnight, which I claim is what you want!"},
  { IMAGE_START_SECONDS_OF_DAY,	"IMAGE_START_SECONDS_OF_DAY",	"Time of start of image since midnight UTC (seconds)."},
  { ELLIPSOID_LOCAL,	"ELLIPSOID_LOCAL",	"Local ellipsoid radius (meters)"},
  { ELLIPSOID_EQUATORIAL,	"ELLIPSOID_EQUATORIAL",	"Equatorial radius, or major radius of planet (meters)"},
  { ELLIPSOID_POLAR,	"ELLIPSOID_POLAR",	"Polar radius, or minor radius of planet (meters)"},
  { ELLIPSOID_FLATTENING,	"ELLIPSOID_FLATTENING",	"Ellipsoid flattening f=(EQUATORIAL-POLAR)/EQUATORIAL (pure number)"},
  { ELLIPSOID_ECCENTRICITY,	"ELLIPSOID_ECCENTRICITY",	"First eccentricity e=sqrt(1-EQUATORIAL^2/POLAR^2) (pure number)"},
  { SIDEREAL_ROTATION_RATE_RADIANS,	"SIDEREAL_ROTATION_RATE_RADIANS",	"Rotation rate of planet, relative to inertial coordinates (radians/second)"},
  { G_TIMES_MASS_PLANET,	"G_TIMES_MASS_PLANET",	"Gravitational constant times mass of planet (newtons/meters^2)"},
  { GHA_DEGREES,	"GHA_DEGREES",	"Greenwich Hour Angle--location of longitude 0 relative to inertial (degrees)"},
  { GHA_DEGREES_FROM_TIME,	"GHA_DEGREES_FROM_TIME",	"Input: time in seconds past image start.  Output: Greenwich Hour Angle (degrees)"},
  { SATELLITE_HEIGHT,	"SATELLITE_HEIGHT",	"Distance from earth center to satellite (meters)."},
  { SATELLITE_HEIGHT_FROM_TIME,	"SATELLITE_HEIGHT_FROM_TIME",	"Input is TIME_SINCE_START, output is SATELLITE_HEIGHT."},
  { SLANT_RANGE,	"SLANT_RANGE",	"Slant range, or distance from satellite to target point (meters)"},
  { DOPPLER,	"DOPPLER",	"Actual central radar doppler shift used while processing (Hz)"},
  { DOPPLER_RATE,	"DOPPLER_RATE",	"Time-rate-of-change of doppler while processing (Hz/second)"},
  { PRF,	"PRF",	"Azimuth pulse repetition frequency (Hz)."},
  { WAVELENGTH,	"WAVELENGTH",	"Radar mean wavelength, or lambda (meters per cycle)."},
  { FREQUENCY,	"FREQUENCY",	"Radar mean carrier frequency (Hz, cycles per second)."},
  { WAVENUMBER,	"WAVENUMBER",	"Radar mean wavenumber = 2*pi/wavelength (radians of phase/meter)."},
  { AZIMUTH_PROCESSING_BANDWIDTH,	"AZIMUTH_PROCESSING_BANDWIDTH",	"Doppler bandwidth passed by processor (Hz)"},
  { CHIRP_RATE,	"CHIRP_RATE",	"Range chirp rate (Hz/second)"},
  { PULSE_DURATION,	"PULSE_DURATION",	"Range pulse duration (seconds)"},
  { RANGE_SAMPLING_RATE,	"RANGE_SAMPLING_RATE",	"Sampling rate of range return (Hz)"},
  { INCIDENCE_DEGREES,	"INCIDENCE_DEGREES",	"Incidence angle; angle at target from up vector to satellite (degrees)"},
  { INCIDENCE_RADIANS,	"INCIDENCE_RADIANS",	"Incidence angle; angle at target from up vector to satellite (radians)"},
  { LOOK_DEGREES,	"LOOK_DEGREES",	"Look angle; angle at satellite from down vector to target (degrees)"},
  { LOOK_RADIANS,	"LOOK_RADIANS",	"Look angle; angle at satellite from down vector to target (radians)"},
  { CLOUD_COVER,	"CLOUD_COVER",	"Percent of image covered by clouds (percent)"},
  { BIT_ERROR_RATE,	"BIT_ERROR_RATE",	"Fraction of downlinked bits which are in error (fraction)."},
  { FALSE_EASTING,	"FALSE_EASTING",	"Value to subtract from X coordinates to get to plain projection (meters)"},
  { FALSE_NORTHING,	"FALSE_NORTHING",	"Value to subtract from Y coordinates to get to plain projection (meters)"},
  { GEOCODING_HEIGHT,	"GEOCODING_HEIGHT",	"Fake elevation that's been used for geocoding (meters)"},
  { INTERFEROMETRIC_REFERENCE_LOOK_RADIANS,	"INTERFEROMETRIC_REFERENCE_LOOK_RADIANS",	"Reference look angle used for baseline (radians of look angle)"},
  { INTERFEROMETRIC_LOOK_RADIANS,	"INTERFEROMETRIC_LOOK_RADIANS",	"Look angle minus reference, used for baseline (radians of look angle)"},
  { INTERFEROMETRIC_FLAT_PHASE,	"INTERFEROMETRIC_FLAT_PHASE",	"Expected interferometric phase difference based on ellipsoid height (radians of phase)"},
  { INTERFEROMETRIC_PHASE_RATE,	"INTERFEROMETRIC_PHASE_RATE",	"Phase to topographic elevation conversion (meters height per radian of phase)"},
  { METADATA_1D_LAST,	"METADATA_1D_LAST",	""},
  {-1,"Unknown_value","Unknown enum value"}
}; /* end table for metadata_1D_enum */

const asf::enum_value_description_t asf::metadata_2D_enum_table[]={
  { METADATA_2D_FIRST,	"METADATA_2D_FIRST",	"Start of metadata enum"},
  { LATITUDE_LONGITUDE_DEGREES,	"LATITUDE_LONGITUDE_DEGREES",	"Location of target on planet surface (decimal degrees)"},
  { LATITUDE_LONGITUDE_RADIANS,	"LATITUDE_LONGITUDE_RADIANS",	"Location of target on planet surface (radians)"},
  { PROJECTION_COORDINATES,	"PROJECTION_COORDINATES",	"Map projection coordinates (meters)"},
  { INTERFEROMETRIC_BASELINE,	"INTERFEROMETRIC_BASELINE",	"Interferometric baseline: x=parallel, y=normal (meters of baseline)"},
  { METADATA_2D_LAST,	"METADATA_2D_LAST",	""},
  {-1,"Unknown_value","Unknown enum value"}
}; /* end table for metadata_2D_enum */

const asf::enum_value_description_t asf::metadata_3D_enum_table[]={
  { METADATA_3D_FIRST,	"METADATA_3D_FIRST",	"Start of metadata enum"},
  { TARGET_POSITION,	"TARGET_POSITION",	"Location of target in 3D body-fixed coordinates (meters)"},
  { TARGET_SATELLITE_DIRECTION,	"TARGET_SATELLITE_DIRECTION",	"From target, unit vector pointing to satellite (unit vector)"},
  { TARGET_UP_DIRECTION,	"TARGET_UP_DIRECTION",	"From target, unit vector pointing upward (unit vector)"},
  { TARGET_NORTH_DIRECTION,	"TARGET_NORTH_DIRECTION",	"From target, unit vector pointing north (unit vector)"},
  { TARGET_EAST_DIRECTION,	"TARGET_EAST_DIRECTION",	"From target, unit vector pointing east (unit vector)"},
  { TARGET_SUN_DIRECTION,	"TARGET_SUN_DIRECTION",	"From target, unit vector pointing toward the sun (unit vector)"},
  { TARGET_MOON_DIRECTION,	"TARGET_MOON_DIRECTION",	"From target, unit vector pointing toward the moon (unit vector)"},
  { SATELLITE_POSITION,	"SATELLITE_POSITION",	"Location of satellite in 3D body-fixed coordinates (meters)"},
  { SATELLITE_VELOCITY,	"SATELLITE_VELOCITY",	"Velocity of satellite in 3D body-fixed coordinates (meters/second)"},
  { SATELLITE_TARGET_DIRECTION,	"SATELLITE_TARGET_DIRECTION",	"From satellite, unit vector pointing to target (unit vector)"},
  { SATELLITE_DOWN_DIRECTION,	"SATELLITE_DOWN_DIRECTION",	"From satellite, unit vector pointing downward (unit vector)"},
  { SATELLITE_FLIGHT_DIRECTION,	"SATELLITE_FLIGHT_DIRECTION",	"From satellite, unit vector pointing along body-fixed velocity vector (unit vector)"},
  { LATITUDE_LONGITUDE_ELEVATION_DEGREES,	"LATITUDE_LONGITUDE_ELEVATION_DEGREES",	"Location of target on planet surface (degrees,degrees,meters from ellipsoid)"},
  { LATITUDE_LONGITUDE_ELEVATION_RADIANS,	"LATITUDE_LONGITUDE_ELEVATION_RADIANS",	"Location of target on planet surface (radians,radians,meters from ellipsoid)"},
  { SLANT_TIME_DOPPLER,	"SLANT_TIME_DOPPLER",	"Slant range (x), time (y), and doppler (z) at this image point (meters,seconds,Hz)"},
  { LLE_FROM_STD,	"LLE_FROM_STD",	"Input is SLANT_TIME_DOPPLER.  Output is LATITUDE_LONGITUDE_ELEVATION_DEGREES."},
  { STD_FROM_LLE,	"STD_FROM_LLE",	"Input is LATITUDE_LONGITUDE_ELEVATION_DEGREES.  Output is SLANT_TIME_DOPPLER."},
  { IMAGE_FROM_LLE,	"IMAGE_FROM_LLE",	"Input is LATITUDE_LONGITUDE_ELEVATION_DEGREES.  Output is image pixels."},
  { METADATA_3D_LAST,	"METADATA_3D_LAST",	""},
  {-1,"Unknown_value","Unknown enum value"}
}; /* end table for metadata_3D_enum */

const asf::enum_value_description_t asf::metadata_state_enum_table[]={
  { METADATA_STATE_FIRST,	"METADATA_STATE_FIRST",	"Start of metadata enum"},
  { SATELLITE_BODYFIXED,	"SATELLITE_BODYFIXED",	"Satellite state vector, body-fixed coordinates (meters)"},
  { SATELLITE_GEI,	"SATELLITE_GEI",	"Satellite state vector, geocentric equatorial inertial coordinates (meters)"},
  { SATELLITE_GEI0,	"SATELLITE_GEI0",	"Satellite state vector, GEI-0 coordinates (meters)"},
  { TARGET_BODYFIXED,	"TARGET_BODYFIXED",	"Target point state vector, body-fixed coordinates (meters)"},
  { TARGET_GEI,	"TARGET_GEI",	"Target point state vector, geocentric equatorial inertial coordinates (meters)"},
  { TARGET_GEI0,	"TARGET_GEI0",	"Target point state vector, GEI-0 coordinates (meters)"},
  { SATELLITE_FROM_TIME,	"SATELLITE_FROM_TIME",	"Input x is time since image start (seconds).  Output is SATELLITE_BODYFIXED."},
  { METADATA_STATE_LAST,	"METADATA_STATE_LAST",	""},
  {-1,"Unknown_value","Unknown enum value"}
}; /* end table for metadata_state_enum */

const asf::enum_value_description_t asf::metadata_string_enum_table[]={
  { METADATA_STRING_FIRST,	"METADATA_STRING_FIRST",	"Start of metadata enum"},
  { SENSOR,	"SENSOR",	"Short name of aquiring sensor, e.g. \"ERS1\"."},
  { MODE,	"MODE",	"Short name of sensor mode, e.g. \"FN1\"."},
  { PROCESSOR,	"PROCESSOR",	"Short name of image processing software, e.g., \"ASF/AISP/3.4\""},
  { METADATA_STRING_LAST,	"METADATA_STRING_LAST",	""},
  {-1,"Unknown_value","Unknown enum value"}
}; /* end table for metadata_string_enum */

const asf::enum_value_description_t asf::metadata_glob_enum_table[]={
  { METADATA_GLOB_FIRST,	"METADATA_GLOB_FIRST",	"Start of metadata enum"},
  { PROJECTION_PARAMETER_GLOB,	"PROJECTION_PARAMETER_GLOB",	"Map projection information (meta_projection struct)"},
  { CALIBRATION_DATA_GLOB,	"CALIBRATION_DATA_GLOB",	"Antenna gain and noise profile (to be determined)"},
  { METADATA_GLOB_LAST,	"METADATA_GLOB_LAST",	""},
  {-1,"Unknown_value","Unknown enum value"}
}; /* end table for metadata_glob_enum */

const asf::enum_value_description_t asf::metadata_int_enum_table[]={
  { METADATA_INT_FIRST,	"METADATA_INT_FIRST",	"Start of metadata enum"},
  { IMAGE_DATA_TYPE,	"IMAGE_DATA_TYPE",	"image_data_type_t for what this image represents (see below: signal data, phase image, etc.)"},
  { PROJECTION_TYPE,	"PROJECTION_TYPE",	"projection_type_t of this image (see below)"},
  { PROJECTION_ZONE,	"PROJECTION_ZONE",	"Zone code for UTM and state plane projected images (zone number)"},
  { SPHEROID_TYPE,	"SPHEROID_TYPE",	"The spheroid in use: see spheroid_type_t below."},
  { DATUM_TYPE,	"DATUM_TYPE",	"The horizontal datum in use: see datum_type_t below."},
  { TIME_DAY_OF_YEAR,	"TIME_DAY_OF_YEAR",	"Day of year of image start; 1 on January 1 (days)"},
  { TIME_YEAR,	"TIME_YEAR",	"Year of image start (years AD)"},
  { TIME_MONTH,	"TIME_MONTH",	"Month of image start (1-12)"},
  { TIME_DAY_OF_MONTH,	"TIME_DAY_OF_MONTH",	"Day of month of image start (1-31)"},
  { ORBIT,	"ORBIT",	"Satellite orbit number.  This is used to identify ground tracks."},
  { FRAME,	"FRAME",	"Frame number within orbit.  For swaths, this is the center frame number."},
  { IS_DESCENDING,	"IS_DESCENDING",	"If 1, satellite is descending (moving south); if 0, ascending (moving north)."},
  { IS_RIGHT_LOOKING,	"IS_RIGHT_LOOKING",	"If 1, satellite is right-looking (like most SARs); if 0, left-looking."},
  { IS_DESKEWED,	"IS_DESKEWED",	"If 1, image is moved to a doppler of 0Hz; if 0, image is positioned at natural doppler."},
  { MISSING_LINES,	"MISSING_LINES",	"Number of missing lines in data take."},
  { METADATA_INT_LAST,	"METADATA_INT_LAST",	""},
  {-1,"Unknown_value","Unknown enum value"}
}; /* end table for metadata_int_enum */

