#!/bin/sh
#
# NAME:		geocode_airsar
# 
# DESCRIPTION:
#	Geocodes AIRSAR DEM to specified map projection.
# 
# EXTERNAL ASSOCIATES:
#     NAME:                USAGE:
#     ---------------------------------------------------------------
#     airsarin		   Ingests AIRSAR DEM file into LAS format
#     airsargeo            Maps input DEM points to lat,lon
#     projectGeo           Map-projects lat,lon to output image points
#     fit_quadratic        Fits a quadratic function to map input to output
#     remap                Remaps input image to output projection
#
# FILE REFERENCES:
#     NAME:                USAGE:			         CREATED BY:
#     -----------------------------------------------------------------------
#     geo_1_$$.tie         ASCII file of (lat,lon,inX,inY)       airsargeo
#     geo_2_$$.tie         ASCII file of (outX,outY,inX,inY)     projectGeo
#     geo_3_$$.ddr         Output DDR with projection info.      projectGeo
#     geo_4_$$.map         Mapping function for remap.           fit_quadratic
# 
# PROGRAM HISTORY:
#     VERS:   DATE:        PURPOSE:
#     ---------------------------------------------------------------
#     1.0     6/01	   Adapted from Orion's geocode
#
# HARDWARE/SOFTWARE LIMITATIONS:
# 
# ALGORITHM DESCRIPTION:
# 
# ALGORITHM REFERENCES:
# 
# BUGS:
# 
#############################################################################

# Change this alias to keep geocode from deleting intermetiate files.
rm="rm"

#
# DO_CMD: exectues the given shell command, checking for errors
#
DO_CMD()
{
        params=""
        while [ ! $# -eq 0 ]
        do
                params=$params" "$1
                shift
        done
        echo "--------------------------------------------------"
        echo "Executing:"$params
        $params
        if [ ! $? -eq 0 ]
        then
                echo "geocode: Last command returned in error:"
                echo $params
		echo "Removing temporary files.."
                $rm geo_*_$$*
                exit 1
        fi
}

#
# usage - enter here on command-line usage error
#
USAGE ()
{
echo " "
echo "USAGE:"
echo "geocode [-p pix] [ [-o|-l] N S E W ]  [-i lat lon nl ns ]"
echo "        [-r [near | bilinear | sinc | 'kernel x y' ] ]"
echo "        [-background <fill> ]"
echo "               in_meta in_img projfile projkey outfile"
echo " "
echo "  -p pix   Set output pixel size to pix meters.           "
echo "  -r ...   Set the output resampling scheme used. (See remap(1))."
echo "           Default is near, for nearest-neighbor interpolation."
echo "  -background Set the background (non-image) parts of the output"
echo "           image to the value <fill> (default is zero-- black)."
echo ""
echo "	in_meta  input AIRSAR data file    	"
echo "	in_img   input LAS image (.ddr and .img) [from airsarin]"
echo "	projfile projection definition file name [from projprm]"
echo "	projkey  projection key name [as passed to projprm]"
echo "	outfile	 output LAS 6.0 image (makes .img, .ddr)    "
echo " " 
echo ""
echo " Windowing Modes: -o, -l, or -i set the size of the output image."
echo "       The default is just big enough to contain the input image."
echo ""
echo "   -o    Means N S E W are projection coordinates:"
echo "    N    Y projection coordinate of top edge"
echo "    S    Y projection coordinate of bottom edge"
echo "    E    X projection coordinate of right edge"
echo "    W    X projection coordinate of left edge"
echo ""
echo "   -l    Means N S are latitude, and E W are longitude:"
echo "    N    Latitude of north edge of output"
echo "    S    Latitude of south edge of output"
echo "    E    Longitude of east edge of output"
echo "    W    Longitude of west edge of output"
echo ""
echo "   -i    Means write a nl x ns output image with:"
echo "    lat  Latitude of center of output"
echo "    lon  Longitude of center of output"
echo ""
echo " "
echo "  geocode projects the given SAR image into"
echo "the given map projection at the given pixel size."
echo "This process is called geocoding."
echo " "
echo "Version 1.0, ASF STEP Tools"
echo " "
exit 1
}

# Main body of script: Command line handler

#
# Set program variables
#
outWindow=""
pixFlag=""
resample="-nearest"

echo
echo '***********************************'
echo '  AIRSAR Geocoding Program  '
echo '***********************************'
echo

if [ $# -eq 0 ] 
then
 echo "No Paramters passed."
 USAGE
fi
while [ $# -gt 5 ]
do
  case $1 in
    -[oli])
	outWindow="$1 $2 $3 $4 $5"
	shift
	shift
	shift
	shift
	echo "Output Window=$outWindow"
	;;
    -p)
    	pixFlag="-p "$2
    	shift
    	;;
    -r)
    	resample="$resample -$2"
    	shift
    	;;
    -b*)
    	resample="$resample -background $2"
    	shift
    	;;
#Undocumented switch: -k: keep intermediate outputs (geo_*)
    -k)
        rm="echo Not Removing:"
        ;;
    *)
	echo "Unrecognized option "$1
	USAGE
	;;
  esac
  shift
done

if [ $# -eq 5 ] 
then
   in_meta=$1
   in_img=$2
   projfile=$3
   projkey=$4
   outfile=$5
else
   echo "Not enough required parameters given."
   USAGE
fi

# Finally, we can begin processing:

echo " "
echo Importing AIRSAR header information
DO_CMD airsarin $in_meta $in_img

echo " "
echo Creating tiepoint file from image metadata
outGeo=geo_1_$$.tie
DO_CMD airsargeo $in_meta $in_img $outGeo

echo " "
echo Map-projecting tie points 
outProj=geo_2_$$.tie
outMeta=$outfile
outDdr=geo_3_$$.ddr
DO_CMD projectGeo $pixFlag $in_meta $projfile $projkey $outGeo \
	$outProj $outMeta $outDdr $outWindow

echo " "
echo Finding least-squares polynomial fit of tie points
outMap=geo_4_$$.map

# Quadratic Map: (Allows curves) use -quadratic for remap
DO_CMD fit_quadratic $outProj $outMap 

# Planar Map: (Faster(?) but linear) use -matrix for remap
# DO_CMD fit_plane $outProj $outMap

echo " "
echo Remapping Image
DO_CMD remap $resample \
	-quadratic $outMap -asDDR $outDdr $in_img $outfile

echo " "
echo Removing temporary files
echo ------------------------------------------------------------------------
$rm $outGeo $outProj $outDdr $outMap

echo " "
echo '***********************************'
echo '  GEOCODE_AIRSAR Exited Successfully  '
echo '***********************************'
echo " "

#
# normal exit
#
exit 0








