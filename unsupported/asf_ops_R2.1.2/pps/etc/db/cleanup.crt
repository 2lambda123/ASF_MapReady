/*************************************************************************
 * Copyright(c) 1996, California Institute of Technology.                *
 *             ALL RIGHTS RESERVED.                                      *
 * U.S. Government Sponsorship acknowledged.                             *
 *************************************************************************/

/*==============================================================================
Filename:	cleanup.crt

Purpose:        delete existing user defined types, rules, tables
 
Input:          PPS defined rules.
 
Output:         None
 
Modif History:
		 @(#)cleanup.crt	1.7  06/09/97	
 
Detailed Desc: 	
==============================================================================*/

/* Clean up before you start */

/* Have to unbind rules before you drop them */

print "unbind rules ..."
print "drop rules ..."

if exists (select * from sysobjects where name = "ActivityIdRule")
begin
	exec sp_unbindrule ActivityIdType
	drop rule ActivityIdRule
end
go
if exists (select * from sysobjects where name = "CoordSysRule")
begin
	exec sp_unbindrule CoordSysType
	drop rule CoordSysRule
end
if exists (select * from sysobjects where name = "CounterNameRule")
begin
	exec sp_unbindrule CounterNameType
	drop rule CounterNameRule
end
if exists (select * from sysobjects where name = "DataDirectionRule")
begin
        exec sp_unbindrule DataDirectionType
        drop rule DataDirectionRule
end
if exists (select * from sysobjects where name = "DestinationRule")
begin
	exec sp_unbindrule DestinationType
	drop rule DestinationRule
end
if exists (select * from sysobjects where name = "FrameIdRule")
begin
	drop rule FrameIdRule
end
if exists (select * from sysobjects where name = "FrameModeRule")
begin
	exec sp_unbindrule FrameModeType
	drop rule FrameModeRule
end
if exists (select * from sysobjects where name = "JobStateRule")
begin
	exec sp_unbindrule JobStateType
	drop rule JobStateRule
end
if exists (select * from sysobjects where name = "JobTypeRule")
begin
	exec sp_unbindrule JobTypeType
	drop rule JobTypeRule
end
if exists (select * from sysobjects where name = "LogicalRule")
begin
	exec sp_unbindrule LogicalType
	drop rule LogicalRule
end
if exists (select * from sysobjects where name = "MediaIdTypeRule")
begin
	exec sp_unbindrule MediaIdTypeType
	drop rule MediaIdTypeRule
end
if exists (select * from sysobjects where name = "MediaTypeRule")
begin
	exec sp_unbindrule MediaTypeType
	drop rule MediaTypeRule
end
if exists (select * from sysobjects where name = "ModeRule")
begin
	exec sp_unbindrule ModeType
	drop rule ModeRule
end
if exists (select * from sysobjects where name = "OrderTypeRule")
begin
	exec sp_unbindrule OrderType
	drop rule OrderTypeRule
end
if exists (select * from sysobjects where name = "OutputFormatRule")
begin
	exec sp_unbindrule OutputFormatType
	drop rule OutputFormatRule
end
if exists (select * from sysobjects where name = "PriorityRule")
begin
	exec sp_unbindrule PriorityType
	drop rule PriorityRule
end
if exists (select * from sysobjects where name = "ProcModeRule")
begin
	exec sp_unbindrule ProcModeType
	drop rule ProcModeRule
end
if exists (select * from sysobjects where name = "ProductTypeRule")
begin
	exec sp_unbindrule ProductType
	drop rule ProductTypeRule
end
if exists (select * from sysobjects where name = "ProjectionRule")
begin
	exec sp_unbindrule ProjectionType
	drop rule ProjectionRule
end
if exists (select * from sysobjects where name = "RecorderIdRule")
begin
	exec sp_unbindrule RecorderIdType
	drop rule RecorderIdRule
end
if exists (select * from sysobjects where name = "SatRule")
begin
	exec sp_unbindrule SatType
	drop rule SatRule
end
if exists (select * from sysobjects where name = "SensorRule")
begin
	exec sp_unbindrule SensorType
	drop rule SensorRule
end
if exists (select * from sysobjects where name = "StationIdRule")
begin
	exec sp_unbindrule StationIdType
	drop rule StationIdRule
end
if exists (select * from sysobjects where name = "StateVecRule")
begin
	exec sp_unbindrule StateVecType
	drop rule StateVecRule
end
if exists (select * from sysobjects where name = "TapeModeRule")
begin
	exec sp_unbindrule TapeModeType
	drop rule TapeModeRule
end
if exists (select * from sysobjects where name = "TapeTypeRule")
begin
	exec sp_unbindrule TapeType
	drop rule TapeTypeRule
end
go

/* Have to drop table before droping types */

print "drop tables ..."

if exists (select * from sysobjects where name = "L1_orders")
	drop table L1_orders
if exists (select * from sysobjects where name = "L1_procparms")
	drop table L1_procparms
if exists (select * from sysobjects where name = "counters")
	drop table counters
if exists (select * from sysobjects where name = "jobs")
	drop table jobs
if exists (select * from sysobjects where name = "policy")
	drop table policy
if exists (select * from sysobjects where name = "scan_orders")
	drop table scan_orders
if exists (select * from sysobjects where name = "schedule")
	drop table schedule
if exists (select * from sysobjects where name = "schedule_resequence")
        drop table schedule_resequence
if exists (select * from sysobjects where name = "ppsgui_orders")
	drop table ppsgui_orders
go

/* drop stored procedures also */

print "drop procs ..."

if exists (select * from sysobjects where name = "sp_insert_schedule")
	drop proc sp_insert_schedule
if exists (select * from sysobjects where name = "sp_auto_avail")
	drop proc sp_auto_avail
if exists (select * from sysobjects where name = "sp_get_l1_order_jobid")
	drop proc sp_get_l1_order_jobid
if exists (select * from sysobjects where name = "sp_get_next_frame_job")
        drop proc sp_get_next_frame_job
if exists (select * from sysobjects where name = "sp_get_next_scan_job")
        drop proc sp_get_next_scan_job
if exists (select * from sysobjects where name = "sp_get_next_jobid")
	drop proc sp_get_next_jobid
if exists (select * from sysobjects where name = "sp_get_scan_order_jobid")
	drop proc sp_get_scan_order_jobid
if exists (select * from sysobjects where name = "sp_is_job_pending")
        drop proc sp_is_job_pending
if exists (select * from sysobjects where name = "sp_is_job_submitted")
	drop proc sp_is_job_submitted
if exists (select * from sysobjects where name = "sp_match_l1_order")
	drop proc sp_match_l1_order
if exists (select * from sysobjects where name = "sp_remove_l1_cancel")
	drop proc sp_remove_l1_cancel
if exists (select * from sysobjects where name = "sp_remove_l1_complete")
	drop proc sp_remove_l1_complete
if exists (select * from sysobjects where name = "sp_remove_scan")
	drop proc sp_remove_scan
if exists (select * from sysobjects where name = "sp_resequence_schedule")
    drop proc sp_resequence_schedule
if exists (select * from sysobjects where name = "sp_update_job_state")
	drop proc sp_update_job_state
if exists (select * from sysobjects where name = "sp_update_status_from_cp")
    drop proc sp_update_status_from_cp
if exists (select * from sysobjects where name = "sp_remove_submit")
	drop proc sp_remove_submit
if exists (select * from sysobjects where name = "sp_update_L1_using_scan")
	drop proc sp_update_L1_using_scan
if exists (select * from sysobjects where name = "sp_update_job_final_status")
	drop proc sp_update_job_final_status
if exists (select * from sysobjects where name = "sp_plan_available_remove")
	drop proc sp_plan_available_remove
if exists (select * from sysobjects where name = "sp_plan_available_to_bottom")
	drop proc sp_plan_available_to_bottom
if exists (select * from sysobjects where name = "sp_plan_available_to_top")
	drop proc sp_plan_available_to_top
if exists (select * from sysobjects where name = "sp_plan_ready_to_bottom")
	drop proc sp_plan_ready_to_bottom
if exists (select * from sysobjects where name = "sp_plan_ready_to_top")
	drop proc sp_plan_ready_to_top
if exists (select * from sysobjects where name = "sp_set_insert_top")
	drop proc sp_set_insert_top
if exists (select * from sysobjects where name = "sp_set_policy")
	drop proc sp_set_policy
if exists (select * from sysobjects where name = "sp_check_pending")
        drop proc sp_check_pending
if exists (select * from sysobjects where name = "sp_get_data_for_ims_queries")
        drop proc sp_get_data_for_ims_queries
if exists (select * from sysobjects where name = "sp_get_data_for_ims_status")
        drop proc sp_get_data_for_ims_status
if exists (select * from sysobjects where name = "sp_get_order_id")
        drop proc sp_get_order_id


if exists (select * from sysobjects where name = "sp_test_print_jobs")
	drop proc sp_test_print_jobs
if exists (select * from sysobjects where name = "sp_test_sva")
	drop proc sp_test_sva
go

print "drop types ..."

if exists (select * from systypes where name = "ActivityIdType")
	exec sp_droptype  ActivityIdType
if exists (select * from systypes where name = "CoordSysType")
	exec sp_droptype  CoordSysType
if exists (select * from systypes where name = "CounterType")
	exec sp_droptype  CounterType
if exists (select * from systypes where name = "CounterNameType")
	exec sp_droptype  CounterNameType
if exists (select * from systypes where name = "DataDirectionType")
        exec sp_droptype  DataDirectionType
if exists (select * from systypes where name = "DestinationType")
	exec sp_droptype  DestinationType
if exists (select * from systypes where name = "FrameModeType")
	exec sp_droptype  FrameModeType
if exists (select * from systypes where name = "JobStateType")
	exec sp_droptype  JobStateType
if exists (select * from systypes where name = "JobTypeType")
	exec sp_droptype  JobTypeType
if exists (select * from systypes where name = "LogicalType")
	exec sp_droptype  LogicalType
if exists (select * from systypes where name = "MediaIdType")
	exec sp_droptype  MediaIdType
if exists (select * from systypes where name = "MediaIdTypeType")
	exec sp_droptype  MediaIdTypeType
if exists (select * from systypes where name = "MediaTypeType")
	exec sp_droptype  MediaTypeType
if exists (select * from systypes where name = "MessageType")
	exec sp_droptype  MessageType
if exists (select * from systypes where name = "ModeType")
	exec sp_droptype  ModeType
if exists (select * from systypes where name = "OrderType")
	exec sp_droptype  OrderType
if exists (select * from systypes where name = "OutputFormatType")
	exec sp_droptype  OutputFormatType
if exists (select * from systypes where name = "PriorityType")
	exec sp_droptype  PriorityType
if exists (select * from systypes where name = "ProcModeType")
	exec sp_droptype  ProcModeType
if exists (select * from systypes where name = "ProductType")
	exec sp_droptype  ProductType
if exists (select * from systypes where name = "ProjectionType")
	exec sp_droptype  ProjectionType
if exists (select * from systypes where name = "RecorderIdType")
	exec sp_droptype  RecorderIdType
if exists (select * from systypes where name = "SatType")
	exec sp_droptype  SatType
if exists (select * from systypes where name = "SensorType")
	exec sp_droptype  SensorType
if exists (select * from systypes where name = "StationIdType")
	exec sp_droptype  StationIdType
if exists (select * from systypes where name = "StateVecType")
	exec sp_droptype  StateVecType
if exists (select * from systypes where name = "TapeModeType")
	exec sp_droptype  TapeModeType
if exists (select * from systypes where name = "TapeType")
	exec sp_droptype  TapeType
if exists (select * from systypes where name = "TimeType")
	exec sp_droptype  TimeType
go

