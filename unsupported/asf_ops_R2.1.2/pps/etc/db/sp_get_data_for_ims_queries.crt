/*************************************************************************
 * Copyright(c) 1996, California Institute of Technology.                *
 *             ALL RIGHTS RESERVED.                                      *
 * U.S. Government Sponsorship acknowledged.                             *
 *************************************************************************/

/*=======================
	@(#)sp_get_data_for_ims_queries.crt	1.1  11/21/96
=========================*/

if exists (select * from sysobjects where name = "sp_get_data_for_ims_queries")
	drop proc sp_get_data_for_ims_queries
go

create proc sp_get_data_for_ims_queries( @job_id int, @job_type JobTypeType)
as

	--  return code :
	--  0 : normal
	--  1 : invalid job_type
	--  2 : invalid job_id		

	declare @start_time 	TimeType, 
                @end_time  	TimeType,
		@center_time	TimeType,
		@platform	SatType,
		@sensor		SensorType,
		@mode		ModeType,
		@rev		int,
		@sequence	int,
		@media_id	MediaIdType,
		@quicklook_flag LogicalType,
		@priority	PriorityType,	
		@auto_flag	LogicalType,
		@job_comment	varchar(255),
		@job_exists	tinyint	

	if @job_type = "L1"
	begin
		select @start_time = start_time, 
                       @end_time = end_time,
		       @center_time = center_time,
		       @platform = platform,
		       @sensor = sensor,
		       @mode = mode,
		       @rev = rev,
		       @sequence = sequence,
		       @media_id = media_id,
		       @quicklook_flag = quicklook_flag	
		from L1_procparms
		where job_id = @job_id	

		select @job_exists =  @@rowcount
	end

	else if @job_type = "SCAN"
	begin
                select @start_time = start_time,
		       @end_time = end_time,
		       @center_time = null,
                       @platform = platform,
		       @sensor = sensor,
                       @mode = mode,
		       @rev = rev,
                       @sequence = sequence,
                       @media_id = media_id,
                       @quicklook_flag = quicklook_flag
		from scan_orders
		where job_id = @job_id

		select @job_exists = @@rowcount
	end

	else
	begin
		print "Invalid job_type : %1!", @job_type
		return 1
	end

	if @job_exists = 0
	begin
		print "Unable to find %1! job with job_id %2!", @job_type, @job_id
		return 2
	end

	/* determine if this job can be auto-scheduled */
        select @auto_flag = auto_flag
                from policy p, jobs j
                where p.job_type = @job_type
		and   p.quicklook_flag = @quicklook_flag
		and   p.job_priority = j.priority
		and   j.job_id = @job_id

	/* get the job_comment */
	select @job_comment = job_comment
		from jobs
		where job_id = @job_id

	/* return data to the caller */ 
	select @start_time, @end_time, @center_time, 
	       @platform, @sensor, @mode, @rev, @sequence, @media_id, 
	       @quicklook_flag, @job_comment, @auto_flag
		
return 0 
go
