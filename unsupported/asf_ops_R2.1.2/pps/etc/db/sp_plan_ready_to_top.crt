/*************************************************************************
 * Copyright(c) 1996, California Institute of Technology.                *
 *             ALL RIGHTS RESERVED.                                      *
 * U.S. Government Sponsorship acknowledged.                             *
 *************************************************************************/

/*=======================
	@(#)sp_plan_ready_to_top.crt	1.2  11/27/96
=========================*/

/* stored procedure to send a READY job to the top of the schedule - jtg */

if exists (select * from sysobjects where name = "sp_plan_ready_to_top")
	drop procedure sp_plan_ready_to_top
go

create proc sp_plan_ready_to_top (
		@job_id 	int,
		@quicklook_flag	LogicalType)
	as

	declare @min_sequence		int
	declare @job_type		varchar(15)
	declare @job_comment		varchar(255)
	declare @priority		PriorityType
	declare @insert_top_flag	LogicalType
        declare @job_state              JobStateType
 
        /* if this job is already "AVAILABLE", then return immediately */
        select @job_type = job_type,
	       @job_state = job_state,
	       @job_comment = job_comment,
               @priority = priority,
               @quicklook_flag = quicklook_flag,
               @insert_top_flag = insert_top_flag
	from jobs
	where job_id = @job_id

        if @job_state = "AVAILABLE"
                return

	/* begin transaction */
	begin transaction

	/* get lowest sequence number currently in schedule */
	select @min_sequence = min(job_sequence) from schedule holdlock 
		where quicklook_flag = @quicklook_flag

	/* really no errors here, just handle empty schedule */
	if (@min_sequence is null)
	begin
		select @min_sequence = 0
	end

	/* decrement @min_sequence */
	select @min_sequence = @min_sequence - 1

	/* update job_state in the jobs table */
	/* update trigger will update job_state in ppsgui_orders table */
	update jobs
		set job_state = "AVAILABLE",
		    state_date = getdate()
                where job_id = @job_id

	if (@@transtate > 0)
	begin
		rollback transaction
		return -1
	end

	/* insert the job into the schedule table */
	insert schedule (job_sequence, job_id, job_type,
		job_comment, priority, quicklook_flag, insert_top_flag)
	values (@min_sequence, @job_id, @job_type,
		@job_comment, @priority, @quicklook_flag, @insert_top_flag)

        if (@@transtate > 0)
        begin
                rollback transaction
                return -1
        end

	/* commit transaction */
	commit transaction

go
