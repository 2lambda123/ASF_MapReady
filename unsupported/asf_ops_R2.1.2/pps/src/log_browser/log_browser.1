.TH LOG_BROWSER 1
.SH LOG_BROWSER
log_browser
.SH SYNOPSIS
log_browser -log <logFileSpec> [-options]
.SH "DESCRIPTION"
.ul
log_browser
points to a single file, or group of files selected using
regular expressions, and allows the user to navigate through them.
Sections of the file can be filtered, using inclusive or exclusive
criteria.  The entire file (or filtered selection) can be printed.

.SS "WARNING Messages"
.ul
log_browser
understands the concept of WARNING messages, which when
detected by the program, will sound a beep.  WARNING messages can be
identified using any user supplied string, such as "WARNING" in the body of
the incoming message.

.SS "CRITICAL Messages"
.ul
log_browser
understands the concept of CRITICAL messages, which when
detected by the program will sound a beep and place a popup window on the
screen.  This popup window can be configured with a suitable color (i.e.,
RED) and will prompt the operator to acknowledge the message by clicking on
the dialog box.  Additional CRITICAL messages that are not acknowledged
will not create additional popups, but will increment the CRITICAL counter
in the popup to let the operator know how many messages of this type have
arrived.

.SS "UPDATE versus BROWSE MODE"
.ul
log_browser
can be started in UPDATE mode, in which case it will monitor
any incoming messages to the desired logfiles, display those messages, and
handle any WARNING or CRITICAL messages as above.  No matter what the user
is doing with the logfile, a new incoming message will cause the display to
show the end of the file (with new data).

If started in (or changed to) BROWSE mode, the user can move back
and forth in the file without having any incoming message affect the
display.

Users can toggle between UPDATE and BROWSE mode at any time.

.SS "SOUND"
Sound control can be selected on the command line at startup, or from a
pulldown menu.  This option only controls whether the program will beep
when a WARNING or CRITICAL message is detected.

.SS "PRINTING"
Users can print entire logfiles, or select a portion of the log to print.
Selected portions of the file can be created using FILTERS, or via mouse
control by using the left mouse button.

.ul
log_browser
uses a script called
.ul
log_lpr.sh
that is executed when a user wants to print a log (or filtered selection).
This script in turn uses a file called .printer (typically in the users
$HOME directory) to route the message to the correct printer.  The .printer
file typically has entries such as "LOG_PRINTER=lw7" and "WINDOW_DUMP_PRINTER=lw2" which control where the print jobs will be spooled.

.SS "FILTERING"
.ul
log_browser
supports a simple filter system.  logfile entries can be
filtered using inclusive or exclusive criteria, but are limited to 2
regular expression fields for each.

.SH OPTIONS
.ul
log_browser
options include the following:

  [-filter <str>] (1 or 2 filters separated by "&&" or "||")
  [-warn <str>] (Substring to indicate a warning)
  [-crit <str>] (Substring to indicate a critical entry)
  [-endlog <str>] (1 or 2 endLog markers w/ "&&" or "||")
  [-debug] (debug mode)
  [-delay <milliseconds>] (Refresh time, def=1000)
  [-sound | -silent] (Toggles sound, def=silent)
  [-browse | -update] (Toggles mode, def=update)
  [-first | -last] ("current" log in ordered list, def=last)
  [Xt toolkit arguments (i.e. -iconic)]
  [-help] (print usage message)

.SH "RETURN VALUE"
None.
.SH ERRORS
.ul
log_browser
reports errors to stderr.  They are self explanatory.
.SH EXAMPLES
Here are some simple examples for log_browser.

1) log_browser -log "/usr/adm/messages*" -first -warn "WARN" -crit "CRIT" -sound &

This example points
.ul
log_browser
at a group of files in the directory
/usr/adm, and uses a regular expression to make the selection.  The
"-first" argument tells
.ul
log_browser
to point to the first file in the
ordered list (users can select from the others using pulldown menus).  A
WARNING string ("WARN") and CRITICAL string ("CRIT") are specified.  This
means the program will identify any incoming message with the string "WARN"
as a WARNING, and "CRIT" as a CRITICAL entry.  Sound is toggled on.

2) log_browser -log "/usr/adm/messages*" -warn "WARNING" -browse -bg Grey &

This example specifies a different WARNING string, and starts up the
program in browse mode (where incoming messages are not displayed).  The
background color is set to Grey.  Note that other standard Xt Toolkit
parameters are also allowed on the command line.

.SH ENVIRONMENT
XAPPLRESDIR should be set to point to the Application Resource file for
.ul
log_browser
.  This file is called "Log_Browser" and typically will reside
in /local/app-defaults.

ASFVERSION reflects the current version of the /ASF and /LOCAL symbolic
links to /asf and /local, respectively.

.SH FILES
A file called .printer, typically found in the users $HOME directory, is
used to route print jobs.

The resource file for
.ul
log_browser
, "Log_browser", which contains dimension, color, and other
attributes.

.SH "SEE ALSO"
syslog(3), logger(1), syslogd(1M), syslog.conf(4B)

.SH NOTES
None.
.SH CAVEATS
.ul
log_browser
is currently designed to navigate through a group of files
contained in the same directory (i.e., it cannot step up or down through
other directories).  This should be changed.

.ul
log_browser
will complain if pointed to a file (or files) that are not in a
valid directory.

.ul
log_browser
is currently using the GNU regular expression library, instead of the
SOLARIS versions.  Could not get them to work properly.  Using the GNU
stuff, I was able to get the package to work properly on both SunOS 4.1.3
and SOLARIS.
.SH DIAGNOSTICS
Self explanatory.
.SH BUGS
Under the SOLARIS version, the ioctl() for detecting characters pending on
a file does not work.  This is patched to check the file once per second in
any case.

.SH RESTRICTIONS
None.
.SH AUTHOR
Bill West (JPL, Section 393) was the original author.  Mike Tankenson made
some minor changes for the ASF environment.  Mike Tankenson wrote this  MAN
page.
.SH HISTORY
None.
