C--  Copyright (c)1996, California Institute of Technology.
C--  U.S. Government Sponsorship acknowledged.
C-- ==========================================================================
C--
C--  Fortran Filename:  mapper.for
C--
C--  Description:   
C-- 
C--  Notes:
C--
C-- ==========================================================================

C-----------------------------------------------------------------------
C
C PROGRAM MAPPER
C
C THIS PROGRAM GRAPHICALLY DISPLAYS THE MISSION PLANNING DATA OVER
C WORLD MAPS IN VARIOUS SIZES AND PROJECTIONS.
C
C $Logfile:   ACS003:[BLD.MPS.MAPR.SRC]MAPPER.QFV  $
C
C THE PROJECTIONS INCLUDE:
C
C   SATELLITE VIEW
C   CYLINDRICAL EQUIDISTANT
C   MERCATOR
C   MILLER CYLINDRICAL
C   POLAR STEREOGRAPHIC
C
C THIS PROGRAM CAN DISPLAY THE WORLD USING ONE OF TWO METHODS:
C
C 1)  READ IN A WORLD MAP FILE CONTAINING THE LATITUDE-LONGITUDE
C     POINT (STRINGS DEFINING THE CONTINENTAL AND POLITICAL 
C     BOUNDARIES OF THE WORLD).
C
C 2)  REGENERATE A DISPLAY SAVED IN A MAP WINDOW FILE 
C     (GKS METAFILE).  REFER TO THE NEXT PARAGRAPH.
C
C THE USER MAY SELECT:
C
C MAP DISPLAY OPTIONS
C   MAP RESOLUTION
C   PROJECTION
C   GRID LINES
C   LAT/LON ORIENTATION OR CENTERING (DEPENDING ON PROJECTION)
C
C MAP MANIPULATION OPTIONS
C   ZOOM IN OR OUT OF THE MAP
C   CREATE OVERLAYS INCLUDING:
C       DARS
C       SEGS
C       DTKS
C       SITES
C       SPECIFIC SITE COVERAGE
C       COVERAGE
C   MANAGE OVERLAYS INCLUDING
C       REMOVE
C       REPLACE
C       DELETE
C       REFRESH
C       CREATE SEG FILE
C   SAVE MAP TO A GKS METAFILE AND HEADER FILE
C   PLOT THE CURRENT MAP ON THE HP7550 PLOTTER
C
C THE GRAPHICS APPLICATION USED IN THIS PROGRAM IS VAX GKS 
C (GRAPHICAL KERNEL SYSTEM).  THE GKS CALLS ARE ANSI STANDARD 
C FORTRAN BINDING CALLS.
C     
C VARIABLES
C INTERNAL
C   DISP        DISPLAY MAP 1=WORLD MAP FILE 2=MAP WINDOW FILE
C   PROJN       PROJECTION TYPE TO DISPLAY MAP
C               = 1, SATELLITE VIEW
C               = 2, CYLINDRICAL EQUISISTANT
C               = 3, MERCATOR
C               = 4, MILLER CYLINDRICAL
C               = 5, POLAR STEREOGRPAHIC N
C               = 6, POLAR STEREOGRPAHIC S
C   GRIDLN      GRID LINES FLAG 0=OFF, 1=ON
C   WNSIZE      SIZE OF THE WINDOW TO DISPLAY ON (%) 
C   ANSW        MENU SELECTION
C   WSID        WORKSTATION ID NUMBER
C   WISS        WORKSTATION INDEP. SEG STORAGE (WISS) ID NUMBER
C   OBSLAT,OBSLON   CENTER LAT/LON
C   OBSMIN,OBSMAX   MIN/MAX LONGITUDE OF THE WINDOW (DEG)
C
C THE FOLLOWING CONTAIN THE CURRENT USER SELECTED 
C WINDOW (WHOLE WORLD OR ZOOM).
C   MINLAT,MAXLAT,
C   MINLON,MAXLON   MIN/MAX LAT/LON OF THE WINDOW (DEG)
C
C THE FOLLOWING CONTAIN THE INITIAL WINDOW (WHOLE WORLD).
C   STMNLT,STMXLT,
C   STMNLN,STMXLN   INITIAL MIN/MAX LAT/LON OF THE WINDOW
C
C   LONPT       ARRAY OF LONGITUDE GRID DIVISIONS (DEG)
C   NSEG        OVERLAY COUNTER
C   CRSEGN      OVERLAY STATUS ARRAY
C   CRSEGT      OVERLAY NAME ARRAY
C   MINX,MAXX,
C   MINY,MAXY   MIN/MAX DISPLAY LENGTH/HEIGHT
C   MINXWN,MAXXWN,
C   MINYWN,MAXYWN   MIN/MAX WINDOW LENGTH/HEIGHT
C   IOS         READ STATEMENT I/O STATUS NUMBER
C   ZMFLAG      ZOOM FLAG 0=DO NOT ZOOM, 1=ZOOM IN OR OUT
C   I,J,K,L     TEMP INTEGER VARIABLES
C   MAP,METAFL,
C       WINDOW,OVER,
C   MANAGE,KEEP,HARD    FLAGS
C
C SUBROUTINE CALLS
C        BEGGKS
C        BEGSEG
C        ENDWS
C        TOPMNU
C        FUNMNU
C        DISWMF  MAIN SUBROUTINE THAT DISPLAYS A WORLD MAP FILE.
C        DISMWF  MAIN SUBROUTINE THAT DISPLAYS A MAP WINDOW FILE.
C        ZOOM    ASKS FOR THE ZOOM WINDOW.
C        ZMSEG   DISPLAY THE MAP IN THE
C        OVERLY  DISPLAYS OVERLAYS ONTO THE DESIGNATED MAP.
C        SAVE    REMOVES, REPLACES, AND DELETES OVERLAYS, AND 
C                SAVES THE CURRENT DISPLAY.
C        ALLSEG  REMOVES ALL SEGMENTS FROM THE WORKSTATIONS
C
C WRITTEN BY:
C      RICHARD P. LEE     5-25-88
C      CRAIG K. FUJIMOTO  8-01-88
C
C MODIFICATIONS
C $Date$ $Revision$ $Author$
C 6/27/94  Nadia Adhami -replace EXIT Ingris with dbexit()
C-----------------------------------------------------------------------

       SUBROUTINE MAPPER ( p_dbname, p_userid, p_password, p_testmode)
C       PROGRAM MAPPER

      character*100 SccsFileID
     -/'@(#)mapper.for	5.1 98/01/08 APS/ASF\0'/

       IMPLICIT NONE

C INTERNAL:
       CHARACTER*100 p_dbname, p_userid, p_password
       INTEGER*4 p_testmode      

       CHARACTER*31 CRSEGT(200)

       INTEGER DISP,PROJN,GRIDLN,ANSW      
       INTEGER WSID,WISS,MWID,WPID
       INTEGER ZMFLAG
       INTEGER NSEG,CRSEGN(200),CRDARID(200)
       INTEGER IOS
       INTEGER MAP,METAFL,WINDOW,OVER,MNG,KEEP,HARD,EXIT_MAPPER
       INTEGER LASER

       REAL WNSIZE
       REAL OBSLAT,OBSLON,OBSMIN,OBSMAX
       REAL MINLAT,MAXLAT,MINLON,MAXLON
       REAL STMNLT,STMXLT,STMNLN,STMXLN
       REAL START_LL(2,2)
       REAL LONPT(13)
       REAL MINX,MAXX,MINY,MAXY
       REAL MINXWN,MAXXWN,MINYWN,MAXYWN

       DATA WSID  / 1 /
       DATA WISS  / 2 /
       DATA MWID  / 3 /
       DATA WPID  / 4 /

       DATA ZMFLAG / 0 /

       DATA MAP    / 1 /
       DATA METAFL / 2 /

       DATA WINDOW / 1 /
       DATA OVER   / 2 /
       DATA MNG    / 3 /
       DATA KEEP   / 4 / 
       DATA HARD   / 5 /
       DATA LASER   / 6 /
       DATA EXIT_MAPPER   / 9 /

c--port--    STATEMENTS TO SUPPORT SYBASE CALLS TO DBLIB
      integer   db_open_ret
      integer*4 db_open
      external  dbexit !$pragma c(dbexit)
      external  db_open !$pragma c(db_open)
      external  db_open_errs !$pragma c(db_open_errs)
      external  print2laser !$pragma c(print2laser)
      integer*4 MAPR_DBPROC
      COMMON/MAPR_DBPROC/MAPR_DBPROC    
      integer*4 TESTMODE
      COMMON/TESTMODE/TESTMODE  
      character*80 WINDOW_NAME
      COMMON  /WINDOW_NAME/WINDOW_NAME

      INTEGER NUGRID
      CHARACTER*80 YN
      



C-----------------------------------------------------------------------

C SET TEST MODE 
      TESTMODE = p_testmode
      IF (TESTMODE .EQ. 1) THEN
        WRITE (6,102)
  102   FORMAT (/,' TESTMODE set')
      ENDIF

      db_open_ret = 99


      MAPR_DBPROC = db_open(p_dbname,
     ?   'MAPPER'//char(0),p_userid,p_password,
     ?   %VAL(0),%VAL(0),db_open_ret)

      IF (db_open_ret .NE. 0) THEN
          call db_open_errs(%VAL(db_open_ret),
     ?      'MAPPER'//char(0),p_userid)
      END IF

      IF (MAPR_DBPROC .EQ. 0) THEN
        WRITE (6,103)
  103   FORMAT (/,'db_open() failed.',/)
        GOTO 9999
      ENDIF

C OPEN GKS
      CALL GOPKS (6, 0)

      IF (TESTMODE .EQ. 1) THEN
        WRITE (6,101) MAPR_DBPROC
  101   FORMAT (/,' MAPR_DBPROC = ', I)
      ENDIF

 1000 CONTINUE

C INITIALIZE GRAPHICS
      CALL BEGWS (WSID,WISS)

C SET COLORS
      CALL SET_COLORS(WSID,IOS)
      IF (IOS .NE. 0) GO TO 9000

 1500 CONTINUE

C INITIALIZE INDEPENDENT SEGMENT STORAGE VARIABLES 
      CALL BEGSEG (NSEG,CRSEGN,CRSEGT)

C DISPLAY TOP MENU
      CALL TOPMNU (DISP)

      IF (DISP .EQ. MAP) THEN

C DISPLAY MAP 
        CALL DISWMF (WSID,PROJN,WNSIZE,GRIDLN,
     1                    MINLAT,MAXLAT,MINLON,MAXLON,
     2                    OBSLAT,OBSLON,OBSMIN,OBSMAX,LONPT,
     3                    NSEG,CRSEGN,CRSEGT,   
     4                    MINX,MAXX,MINY,MAXY,
     5                    MINXWN,MAXXWN,MINYWN,MAXYWN,
     6                    STMNLT,STMXLT,STMNLN,STMXLN,
     7                    START_LL)

      ELSE IF (DISP .EQ. METAFL) THEN 
    
C DISPLAY MAP WINDOW FILES (METAFILES)
                                      
        CALL DISMWF (WSID,MWID,PROJN,WNSIZE,GRIDLN,
     1                MINLAT,MAXLAT,MINLON,MAXLON,
     2                OBSLAT,OBSLON,OBSMIN,OBSMAX,LONPT,
     3                NSEG,CRSEGN,CRSEGT,CRDARID,       
     4                MINX,MAXX,MINY,MAXY,
     5                MINXWN,MAXXWN,MINYWN,MAXYWN,
     6                STMNLT,STMXLT,STMNLN,STMXLN,
     7                START_LL,
     8                IOS)
                                                
        IF (IOS .NE. 0) THEN
          GO TO 1500
        END IF

      ELSE
                                                
C TERMINATE MAPPER
        GO TO 9000
           
      ENDIF


C        WRITE(6,*) 'AFTER DISPLAY'
C        WRITE(6,*) 'MIN/MAX LT/LN:',MINLAT,MAXLAT,MINLON,MAXLON
C        WRITE(6,*) 'OBS LAT/LON :',OBSLAT,OBSLON
C        WRITE(6,*) 'OBS MIN/MAX :',OBSMIN,OBSMAX

C MAPPER FUNCTIONS 

 2000 CONTINUE
  
C DISPLAY MAPPER FUNCTION MENU

      CALL FUNMNU (PROJN,ANSW)

C REFRESH DISPLAY

      IF (ANSW .EQ. 99) THEN

C REDISPLAY THE WINDOW
            CALL SET_WINDOW (WSID,WNSIZE,
     1                       MINXWN,MAXXWN,MINYWN,MAXYWN)
 
C DISPLAY THE SEGMENTS
            CALL DISP_SEG (WSID,PROJN,NUGRID,GRIDLN,WNSIZE,
     1              MINLAT,MAXLAT,MINLON,MAXLON,
     2              OBSLAT,OBSLON,OBSMIN,OBSMAX,LONPT,
     3              NSEG,CRSEGN,
     4              MINX,MAXX,MINY,MAXY)
 
            GO TO 2000

      END IF

C CHANGE PROJECTION OR CENTER
           
      IF (ANSW .EQ. WINDOW) THEN

C        WRITE(6,*) 'BEFORE ZOOM:'
C        WRITE(6,*) 'MIN/MAX LT/LN:',MINLAT,MAXLAT,MINLON,MAXLON
C        WRITE(6,*) 'OBS LAT/LON :',OBSLAT,OBSLON
C        WRITE(6,*) 'OBS MIN/MAX :',OBSMIN,OBSMAX
C        WRITE(6,*) 'ST:',STMNLT,STMXLT,STMNLN,STMXLN
        
        CALL ZOOM (DISP,WSID,WISS,PROJN,GRIDLN,WNSIZE,
     1             MINLAT,MAXLAT,MINLON,MAXLON,
     2             OBSLAT,OBSLON,OBSMIN,OBSMAX,LONPT,
     3             NSEG,CRSEGN,
     4             STMNLT,STMXLT,STMNLN,STMXLN,
     5             START_LL,
     6             MINX,MAXX,MINY,MAXY,
     7             MINXWN,MAXXWN,MINYWN,MAXYWN)

C        WRITE(6,*) 'AFTER ZOOM:'
C        WRITE(6,*) 'MIN/MAX LT/LN:',MINLAT,MAXLAT,MINLON,MAXLON
C        WRITE(6,*) 'OBS LAT/LON :',OBSLAT,OBSLON
C        WRITE(6,*) 'OBS MIN/MAX :',OBSMIN,OBSMAX
C        WRITE(6,*) 'ST LT/LN:',STMNLT,STMXLT,STMNLN,STMXLN

        GO TO 2000

C ADD OVERLAYS               

      ELSE IF (ANSW .EQ. OVER) THEN

        CALL OVERLY (WSID,PROJN,
     1                MINLAT,MAXLAT,MINLON,MAXLON,
     2                NSEG,CRSEGN,CRSEGT,CRDARID,
     3                STMNLT,STMXLT,STMNLN,STMXLN,
     4                MINX,MAXX,MINY,MAXY,
     5                MINXWN,MAXXWN,MINYWN,MAXYWN,
     6                OBSLAT,OBSLON,OBSMIN,OBSMAX,
     7                GRIDLN,WNSIZE,LONPT)

        GO TO 2000

C MANAGE INDEPENDENT SEGMENT STORAGE
                                              
      ELSE IF (ANSW .EQ. MNG) THEN            

        CALL MANAGE (p_userid,p_password,
     6               WSID,PROJN,GRIDLN,WNSIZE,
     1               MINLAT,MAXLAT,MINLON,MAXLON,
     2               OBSLAT,OBSLON,OBSMIN,OBSMAX,LONPT,
     3               NSEG,CRSEGN,CRSEGT,CRDARID,
     4               MINX,MAXX,MINY,MAXY,
     5               MINXWN,MAXXWN,MINYWN,MAXYWN)

        GO TO 2000            

C SAVE DISPLAY                          
                              
      ELSE IF (ANSW .EQ. KEEP) THEN


        CALL SAVE (MWID,PROJN,GRIDLN,
     1             MINLAT,MAXLAT,MINLON,MAXLON,
     2             STMNLT,STMXLT,STMNLN,STMXLN,
     3             OBSLAT,OBSLON,
     4             NSEG,CRSEGN,CRSEGT,CRDARID)

        GO TO 2000

C SEND DISPLAY TO HARDCOPY         

      ELSE IF (ANSW .EQ. HARD) THEN

        WRITE(6,*) '<< THERE IS NO PLOTTER CONNECTED TO THE SYSTEM >>'

c--port        CALL DISPLOT(WPID,PROJN,GRIDLN,WNSIZE,
c     1            MINLAT,MAXLAT,MINLON,MAXLON,
c     2            OBSLAT,OBSLON,OBSMIN,OBSMAX,
c     3            LONPT,
c     4            MINX,MAXX,MINY,MAXY,
c     5            MINXWN,MAXXWN,MINYWN,MAXYWN,
c     7            NSEG,CRSEGN)

        GO TO 2000

      ELSE IF (ANSW .EQ. LASER) THEN
 
        WRITE(6,*) '>> PRINTING TO A LASER PRINTER ...'


               CALL PRINT2LASER()
 
c--port        CALL DISPRINT(WPID,PROJN,GRIDLN,WNSIZE,
c     1            MINLAT,MAXLAT,MINLON,MAXLON,
c     2            OBSLAT,OBSLON,OBSMIN,OBSMAX,
c     3            LONPT,
c     4            MINX,MAXX,MINY,MAXY,
c     5            MINXWN,MAXXWN,MINYWN,MAXYWN,
c     7            NSEG,CRSEGN)
 
        GO TO 2000
 

      ELSE IF (ANSW .EQ. EXIT_MAPPER) THEN

C DELETE ALL STORED SEGMENTS
          CALL ALLSEG (NSEG,CRSEGN,CRSEGT,CRDARID)

C CLOSE THE WORKSTATIONS
          CALL ENDWS (WSID,WISS)

C TERMINATE MAPPER
          GO TO 9000
 
      ELSE 

C TERMINATE MAPPER
          WRITE (6,300) 'Are you finished with this map [Y/N] ? '
  300     FORMAT (/,1X,A,$)

          READ (5,310,IOSTAT = IOS) YN
  310     FORMAT(A1)

          IF (YN .NE. 'Y' .AND. YN .NE. 'y') GO TO 2000

C DELETE ALL STORED SEGMENTS
          CALL ALLSEG (NSEG,CRSEGN,CRSEGT,CRDARID)

C CLOSE THE WORKSTATIONS
          CALL ENDWS (WSID,WISS)

          GO TO 1000

      END IF

 9000 CONTINUE

C CLOSE GKS
C      CALL GCLKS()

C CLOSE THE INGRES DATABASE
c--port--##    EXIT
c       CALL dbexit()

 9999 CONTINUE
      END
