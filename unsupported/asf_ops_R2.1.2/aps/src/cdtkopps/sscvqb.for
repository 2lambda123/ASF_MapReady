C--  Copyright (c)1996, California Institute of Technology.
C--  U.S. Government Sponsorship acknowledged.

********************************************************************
*  Name:	SSCVQB
*  Module Type: SUBROUTINE 	Language: FORTRAN
*  $Logfile:   ACS003:[BLD.MPS.LIB.SRC]SSCVQB.FOV  $
*  Purpose:	For a QUADRILATERAL, build a search area in min/max lat/lon.
*  Functions called:
*  VECTOR LIBRARY:  SPHERE
*  Input Parameters:
*  Name         Type    Definition
*  NWLAT	REAL*8	LATITUDE IN DEGREES OF POINT 1
*  NWLON	REAL*8	LONGITUDE IN DEGREES OF POINT 1
*  NELAT	REAL*8	LATITUDE IN DEGREES OF POINT 2
*  NELON	REAL*8	LONGITUDE IN DEGREES OF POINT 2
*  SELAT	REAL*8	LATITUDE IN DEGREES OF POINT 3
*  SELON	REAL*8	LONGITUDE IN DEGREES OF POINT 3
*  SWLAT	REAL*8	LATITUDE IN DEGREES OF POINT 4
*  SWLON	REAL*8	LONGITUDE IN DEGREES OF POINT 4
*  RDEG		REAL*8	NO. DEGREES TO EXTEND SEARCH AROUND QUAD.
*  Output Parameters:
*  Name         Type    Definition
*  NLAT		REAL*8	NORTHERN BOUNDARY OF SEARCH AREA IN DEG LAT.
*  SLAT		REAL*8	SOUTHERN BOUNDARY OF SEARCH AREA IN DEG LAT.
*  ELON		REAL*8	EASTERN BOUNDARY OF SEARCH AREA IN DEG LON.
*  WLON		REAL*8	WESTERN BOUNDARY OF SEARCH AREA IN DEG LON.
*  INORML	INTEGER	= 0 	IF A NORMAL QUERY.  FOR EXAMPLE, IF THE QUAD
*				IS SMALL, NEAR THE EQUATOR, AND NOT STRADDLING
*				THE DATE LINE.  YOU THEN WANT 
*				POINTS E OF THE WEST LONG and W OF EAST LONG.
*			= 1	ABNORMAL QUERY:  IF QUAD INCLUDES A POLE AND
*				ALL LONGITUDES ARE WANTED.  OR THE QUAD
*				STRADDLES THE DATE LINE AND YOU THEN WANT 
*				POINTS E OF THE WEST LONG or W OF EAST LONG.
*			REMEMBER LONGITUDES IN THE DATABASE ARE STORED AS 
*			> -180.0 AND <= 180.0.
*  Variables:
*  Locals :
*  Externals :
*  Modification History:                                            
*  Date			Revision	Author
*  $Date$ $Revision$ $Author$
*  $Date$ $Revision$ $Author$
*                                                                   
*********************************************************************/
      SUBROUTINE SSCVQB (NWLAT,NWLON,NELAT,NELON,SELAT,SELON,SWLAT,
     ?	SWLON,RDEG,NLAT,SLAT,ELON,WLON,INORML)
      character*100 SccsFileID
     -/'@(#)sscvqb.for	5.1 98/01/08 APS/ASF\0'/

      IMPLICIT NONE
      REAL*8 NWLAT,NWLON,NELAT,NELON,SELAT,SELON,SWLAT,SWLON,RDEG,
     ?		NLAT,SLAT,ELON,WLON
      INTEGER INORML
      REAL*8 DATE1(3), Q1(3), Q2(3), Q3(3), Q4(3)
      REAL*8 XLL(2), POLE(3), F, MAXABSLAT
      MAXABSLAT = 0.0
C---	GET POINTS IN XYZ CLOCKWISE.
      XLL(1) = NWLAT
      XLL(2) = NWLON
      CALL LL2XYZ(XLL,Q1)
      XLL(1) = NELAT
      XLL(2) = NELON
      CALL LL2XYZ(XLL,Q2)
      XLL(1) = SELAT
      XLL(2) = SELON
      CALL LL2XYZ(XLL,Q3)
      XLL(1) = SWLAT
      XLL(2) = SWLON
      CALL LL2XYZ(XLL,Q4)
C---	GET NORTHERNMOST POINT IN THE QUAD - LAT.
C---	MY GUESS IS THAT THE REASON WHY THE MAX AND MIN FORTRAN FUNCTIONS
C---	WEREN'T USED ON THE SUBROUTINE ARGUMENTS IS BECAUSE OF THE USE 
C---	OF THE XYZ REPRESENTATION LATER TO BE CONSISTENT.  I WROTE THIS 
C---	CODE AND FORGOT WHY.  OH, WELL.  
      CALL QNPNT(NLAT,Q1,Q2,Q3,Q4)
      NLAT = NLAT + RDEG
C---	GET SOUTHERNMOST POINT IN THE QUAD - LAT.
      CALL QSPNT(SLAT,Q1,Q2,Q3,Q4)
      SLAT = SLAT - RDEG
      MAXABSLAT = MAX(ABS(SLAT), ABS(NLAT))
C---	CHECK FOR N POLE INSIDE THE SEARCH:  
      IF(NLAT .LT. 85.0D0) GO TO 1000
C---	N POLE IS INSIDE THE SEARCH.  
      NLAT = 91.0D0
      INORML = 1
      WLON = -181.0D0
      ELON =  181.0D0
      GO TO 9999
 1000 CONTINUE
C---	CHECK FOR S POLE INSIDE THE SEARCH:  
      IF(SLAT .GT. -85.0D0) GO TO 2000
C---	S POLE IS INSIDE THE SEARCH.  
      SLAT = -91.0D0
      INORML = 1
      WLON = -181.0D0
      ELON =  181.0D0
      GO TO 9999
 2000 CONTINUE
C---	POLE WAS NOT COVERED.  SET UP FOR WLON AND ELON.  
C---
C---	DOES THE QUAD STRADDLE THE 180 DEG E LON?
      DATE1(1) = -1
      DATE1(2) = 0
      DATE1(3) = 0
      POLE(1) = 0
      POLE(2) = 0
      POLE(3) = 1
C---	N POLE TO EQUATOR.
      CALL GCLINQ(F,POLE,DATE1,Q1,Q2,Q3,Q4)
      IF(F .GE. 0.0D0) GO TO 3000
      POLE(3) = -1
C---	S POLE TO EQUATOR.
      CALL GCLINQ(F,POLE,DATE1,Q1,Q2,Q3,Q4)
      IF(F .LT. 0.0D0) GO TO 4000
 3000 CONTINUE
C---	THE QUAD STRADDLES THE DATELINE.  ABNORMAL QUERY.  
      INORML = 1
C---	DECIDE ELON.
      ELON = -181.0D0
      IF(NWLON .LT. 0.0D0 .AND. NWLON .GT. ELON ) ELON = NWLON
      IF(SWLON .LT. 0.0D0 .AND. SWLON .GT. ELON ) ELON = SWLON
      IF(NELON .LT. 0.0D0 .AND. NELON .GT. ELON ) ELON = NELON
      IF(SELON .LT. 0.0D0 .AND. SELON .GT. ELON ) ELON = SELON
C---	A BUG APPEARED, DUE TO THE SEARCH AREA BEING TOO SMALL.  WHEN
C---	WE ARE UP SO FAR NORTH, TO EXTEND THE SEARCH DISTANCE E AND W, 
C---	AND EXTEND THE SAME DISTANCE AS N/S, WE NEED TO INCREASE THE NUMBER
C---	OF DEGREES BECAUSE THE CIRCLES OF LATITUDE GET SMALLER AS YOU GO 
C---	NORTH.  THE SIZE OF THE CIRCLES OF LATITUDE ARE PROPORTIONAL TO 
C---	COS(LATITUDE).  SO WE DIVIDE RDEG BY THE COS TO INCREASE THE 
C---	LONGITUDE BRACKET BEYOND THE SITE BRACKET.  
C---	THE INCREASE WILL BE RDEG / COS(LATITUDE)
C---	MAXABSLAT IS THE MAXIMUM OF THE ABSOLUTE VALUES OF THE LATITUDES IN 
C---	THE SEARCH AREA.  
      ELON = ELON + RDEG/COSD(MAXABSLAT)
C---	DECIDE WLON.
      WLON = 181.0D0
      IF(NWLON .GT. 0.0D0 .AND. NWLON .LT. WLON ) WLON = NWLON
      IF(SWLON .GT. 0.0D0 .AND. SWLON .LT. WLON ) WLON = SWLON
      IF(NELON .GT. 0.0D0 .AND. NELON .LT. WLON ) WLON = NELON
      IF(SELON .GT. 0.0D0 .AND. SELON .LT. WLON ) WLON = SELON
      WLON = WLON - RDEG/COSD(MAXABSLAT)
      GO TO 9999
 4000 CONTINUE
C---	THE QUAD DOES NOT CROSS THE DATELINE.  
C---	NORMAL QUERY.  
      INORML = 0
      ELON = MAX(NWLON,NELON,SELON,SWLON) + RDEG/COSD(MAXABSLAT)
      WLON = MIN(NWLON,NELON,SELON,SWLON) - RDEG/COSD(MAXABSLAT)
      IF (ELON .LE. 180.0D0 .AND. WLON .GT. -180D0) GO TO 9999
C---	THE QUERY JUST BECAME ABNORMAL DUE TO RDEG.  
C---	THE SEARCH AREA STRADDLES THE DATELINE.
      INORML = 1
      IF(ELON .GT. 180.0D0) ELON = ELON - 360.0D0
      IF(ELON .GT. 180.0D0) ELON = ELON - 360.0D0
      IF(WLON .LE. -180.0D0) WLON = WLON + 360.0D0
      IF(WLON .LE. -180.0D0) WLON = WLON + 360.0D0
 9999 CONTINUE
      RETURN
      END
