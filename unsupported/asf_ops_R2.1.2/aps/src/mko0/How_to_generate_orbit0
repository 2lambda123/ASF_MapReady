This directory describes all of the steps needed to create orbit0 files,
as well as some tools which are needed to 'massage' data during certain
steps of the orbit0-creation process.

TOOLS:

*****************************************************************************
gensttm  -  Can be used to determine 'orbit0' time for a given satellite,
			satellite phase.  You will need to provide the following 
			parameters, in the exact order below:

			Usage: ./gensttm <time> <days_cyc> <rev_cyc> <start_rev>
                               ^         ^         ^          ^
                               |         |         |          |
                               |         |         |          |
            phase start time --|         |         |          |
            or first coverage pt.*       |         |          |
                                         |         |          |
            days/cycle for phase --------|         |          |
                                                   |          |
            revs/cycle for phase ------------------|          |
                                                              |
            start rev for phase-------------------------------|

			The 'orbit0' time can then be updated in the frm.hdr file.

	*The time of the first coverage point in the coverage file created
	 by aps_crt_nom_cov executable.
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

mko0 -	This tool uses eosmenu-type file to create frames for an orbit0 file.
        The header for the orbit0 file must still be inserted as a separate
		step; this may be accomplished by manual editing.
		(or automatically inserted by a script such as genr1)

		The usage is as follows:
		       mko0  <eosmenu-file>   >  <orbit0-file>

		NOTE: Headers for orbit0 files may be found in the file frm.hdr


*****************************************************************************


FILES:

frm.hdr   Contains headers for orbit0 files.

	The frm.hdr file contains headers to be placed at the beginning of orbit0
	files, either manually or automatically by use of a script such as genr1.

	The time in these headers corresponds to the 'theoretical orbit0 time' for
	the given satellite.  This theoretical time can be determine in several
	different ways (see the gensttm tool).



PROCEDURES:
*****************************************************************************

E2,E1,J1 Orbit0 generation

There is currently no end-to-end tool for creating orbit0 files for the
satellites E1, E2 or J1 (this tool may be forthcoming).
What we do have is a step-by-step procedure detailed below:

1) Determine the time range of the first available rev for the satellite.
   Use the aps_rev2time tool.
   (eg for E1, phase G:  aps_rev2time -s E1 -r 19248)
   (eg for E2, phase A:  aps_rev2time -s E2 -r 1)
   (eg for J1, phase A:  aps_rev2time -s J1 -r 464)

2) Create a 1-second interval coverage file for the satellite in question.
   You may consult the uman page system for more information on how to do this.

   (eg: aps_crt_nom_cov -Umiguel -Pdappsdev -b<strttime> -e<endtime> -q E2 SAR)

   Use the strttime, endtime determined in step (1)
   Use the -q flag to send the coverage results to a file, 
   (eg: $APS_DATA/cvrg/E2_A_SAR.COV)


3) Remove the first record from the coverage file created in step (2).
   This record contains phase information which is not needed by this task.

4) Remove inflection points, maskinout points, etc. from the coverage file
   created in step (2).  You can do this by identifying the 1-second interval
   records in the file by their fractional time and isolating them:

   (eg:  grep ".779" E2_A_SAR.COV > E2A.STD.COV )

5) Convert the trimmed coverage file into an eosmenu-type file, using the
   nom_cov_fmt.pl tool:

   (eg: nom_cov_fmt.pl E2A.STD.COV > E2A.STD )

6) Place a header from the frm.hdr file into the destination orbit0 file,
   for the satellite being used.

   (eg: place E2 header from frm.hdr into new file E2STDFRM.TXT)

7) Convert the eosmenu-type file from step (5) into orbit0 frames, and
   append them to the destination orbit0 file.

   (eg: mko0 E2A.STD >> E2STDFRM.TXT)

8) The orbit0 file is now complete.

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

R1 orbit0 generation

aps_crt_nom_cov - This executable will generate a 1 second 
		R1_<phase>_<sensor1>.COV file for a R1 sensor mode. 

		An automated script to do this for all 26 R1 sensor modes
		is found in /home/miguel/aps/src/mko0/create_R1_test_phase_B

		NOTE: The R1_<phase>_<sensor1>.COV entries must match
		      the interval in nom_cov_fmt.pl below (ie: 1 second)
			  The interval employed by aps_crt_nom_cov executable
			  is controlled from the setup file $APS_DATA/asap/asap5.dat


genr1 - This tool will generate orbit0 files for all R1 sensor modes.

		Part 1 of genr1  converts the R1_<phase>_<sensor1>.COV 
		coverage data (created by the aps_crt_nom_cov executable)
		to the data in temporary file R1<phase>.<sensor1prime>.COV
		also taking out inflection points, maskinout points, etc.
		from the R1_<phase>_<sensor1>.COV file.

		NOTE: sensor1prime is the data dictionary name for sensor1 mode.


		Part 2 of genr1 converts temporary file R1<phase>.<sensor1prime>.COV
		to an eosmenu-type file,  which will be used by Part 3 of genr1.
		This is done using nom_cov_fmt.pl as follows:
		
			nom_cov_fmt.pl R1<phase>.<sensor1prime>.COV

			The output is redirected to the eosmenu-type file:
			(eg: nom_cov_fmt.pl R1A.WD1.COV > R1A.WD1)


		Part 3 of genr1 converts the eosmenu-type file to an orbit0
		file using the mko0 tool.  The mko0 tool usage is listed above.

		     (eg:  mko0  R1A.WD1   >  R1WD1FRM.TXT  )

NOTE: 
		The various files used by genr1 are temporary, and should be deleted to 
		conserve disk memory.

		(eg:R1_A_SW1.COV,  a R1_<phase>_<sensor1>.COV file is temporary. Delete after use.
			R1A.WD1.COV is a temporary reformatted coverage file;delete after use.
			R1A.WD1 is a temporary eosmenu-type file. Delete after use.)

