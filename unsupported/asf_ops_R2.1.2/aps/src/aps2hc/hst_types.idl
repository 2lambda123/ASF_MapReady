/******************************************************************************/
/*                                                                            */
/*  Filename:    hst_types.idl                                                */
/*                                                                            */
/*  Abstract:    Type definitions used throughout Host Controller DCE         */
/*               services.                                                    */
/*                                                                            */
/*  Author:      Philip Munts                                                 */
/*                                                                            */
/*  History:     25 Aug 1995 -- PM  -- Initial version.                       */
/*               30 Aug 1995 -- NJC -- Added more types.                      */
/*                1 Sep 1995 -- NJC -- Fixed WOS_Record and add types.        */
/*                7 Sep 1995 -- PM  -- Added SonyID1_status_t.                */
/*               15 Sep 1995 -- NJC -- Fixed ROS_Record, added constants      */
/*                                                                            */
/*  This file defines types used by other DCE interfaces.  Add a line like:   */
/*  import "hst_types.idl"; to the .idl file for an interface using any of    */
/*  these types.  You will also need to add -I../hst_types to the idl flags.  */
/*                                                                            */
/******************************************************************************/

[uuid(0013331e-6dbf-103b-aaf9-89e52541aa77),version(1.0)]

interface hst_types
{
  const long int MAX_SATELLITES    = (10);
  const long int MAX_WOSES         = (2);
  const long int CUSTOMERS         = (2);
  const long int RECORDINGS        = (2);
  const long int MAX_WOS_RECORDS   = (2000);
  const long int MAX_HCWOS_RECORDS = (MAX_WOS_RECORDS * MAX_WOSES);
  const long int MAX_JIT_RECORDS   = (MAX_WOS_RECORDS * CUSTOMERS * RECORDINGS);
  const long int MAX_ROS_RECORDS   = (MAX_WOS_RECORDS);
  const long int MAX_HRS_TIME_SLOTS = (MAX_ROS_RECORDS + 1);
  const long int MAX_DEVICES       = (25);

  const long int MAX_EPHEMERIS_RECORDS = (200);
  const long int MAX_FREQUENCIES = (6);

  const long int WOS_10_METER    = (0);
  const long int WOS_11_METER    = (1);

  const time_t MAX_TIME     = (2147483647);
  const time_t MIN_TIME     = (0);

  const char* RGS_10_METER  = "10_METER";
  const char* RGS_11_METER  = "11_METER";

  const char* FORWARD       = "FORWARD";
  const char* REVERSE       = "REVERSE";

  const char* JERS_1        = "JERS-1";
  const char* ERS_1         = "ERS-1";
  const char* ERS_2         = "ERS-2";
  const char* ADEOS_1       = "ADEOS-1";
  const char* RADARSAT_1    = "RADARSAT-1";

  const char* QUICKLOOK     = "QUICKLOOK";
  const char* ASF           = "ASF";
  const char* NASDA         = "NASDA";
  const char* ESA           = "ESA";
  const char* CSA           = "CSA";

  const long int TAPE_CHANGE_911           = (0);
  const long int TAPE_CHANGE_QUICKLOOK_911 = (1);
  const long int TAPE_CHANGE               = (2);
  const long int TAPE_CHANGE_QUICKLOOK     = (3);


  const long int MAX_ODL_WOS_MSG = (1000000);
  typedef [string] char ODL_msg_wos_t[MAX_ODL_WOS_MSG];

  const long int MAX_ODL_DUB_MSG = (10000);
  typedef [string] char ODL_msg_dub_t[MAX_ODL_DUB_MSG];


  typedef [string] char wos_acceptance_t[10+1];
  const char* ACCEPT = "ACCEPT";
  const char* REJECT = "REJECT";

  typedef enum
  {
    WAIT_WOS,
    ACCEPT_WOS,
    REJECT_WOS
  } accept_wos_t;


  typedef struct downlink_p_msg_t
  {
    long int place_holder;
  } DOWNLINK_P_MSG_T;

  typedef [string] char ingest_type_t[21];

  typedef struct downlink_ingest_msg_t
  {
    ingest_type_t ingest_type;
  } DOWNLINK_INGEST_MSG_T;

  typedef struct downlink_ingest_p_msg_t
  {
    long int place_holder;
  } DOWNLINK_INGEST_P_MSG_T;


  typedef struct dub_sg_msg_t
  {
    long int place_holder;
  } DUB_SG_MSG_T;

  typedef struct dub_sp_msg_t
  {
    long int place_holder;
  } DUB_SP_MSG_T;

  typedef struct dub_p_msg_t
  {
    long int place_holder;
  } DUB_P_MSG_T;

  typedef struct tracking_ingest_p_msg_t
  {
    long int place_holder;
  } TRACKING_INGEST_P_MSG_T;


  typedef struct pm_msg_t
  {
    long int place_holder;
  } PM_MSG_T;

  typedef struct pm_p_msg_t
  {
    long int place_holder;
  } PM_P_MSG_T;


  typedef struct sniff_msg_t
  {
    long int place_holder;
  } SNIFF_MSG_T;

  typedef struct sniff_p_msg_t
  {
    long int place_holder;
  } SNIFF_P_MSG_T;


  typedef struct spool_p_msg_t
  {
    long int place_holder;
  } SPOOL_P_MSG_T;



  typedef [string] char job_type_str_t[13];

  typedef enum
  {
    DOWNLINK,
    DUB,
    PM,
    SNIFF,
    SPOOL,
    TAPE_SWAP,
    TAPE_RELEASE
  } job_type_t;

  typedef long job_count_t;

  typedef enum
  {
    DCRSI,
    HD_96,
    SONYID1
  } recorder_model_t;


  typedef struct hrs_time_slot_t
  {
    time_t s_time;
    time_t e_time;
  } HRS_TIME_SLOT_T;


  typedef [string] char process_id_t[256];
  typedef [string] char process_addr_t[256];
  typedef [string] char message_t[1024];

  typedef [string] char device_label_t[9];
  typedef [string] char doer_label_t[21];

  typedef [string] char filename_t[256];

  typedef short int dps2_terminal_t;
  const short int dps2_MATRIX_SIZE = 16;
  const dps2_terminal_t dps2_UNCONNECTED = -1;
  typedef dps2_terminal_t dps2_MatrixState_t[dps2_MATRIX_SIZE];

  typedef unsigned long int tape_address_t;
  typedef char tape_annotation_t[256];
  typedef char tape_id_t[13];

  typedef unsigned small int SonyID1_status_t[12];

  typedef struct
  {
    unsigned short int ModStatus;
    unsigned short int AuxStatus;
    unsigned short int ErrorCode;
    tape_address_t StartPosition;
    tape_address_t EndPosition;
    tape_address_t CurrentPosition;
  } dcrsi_status_t;

  typedef struct
  {
    char mode;
    float speed;
    short int ClockLock;
    short int MasterLock;
    short int LowTape;
    short int Remote;
    short int Config;
    tape_address_t FootageCount;
  } HD96_status_t;

  typedef char time_str_t[21+1];
  typedef char msg_type_t[80];
  typedef char subsystem_t[3+1];


  typedef char          satellite_id_t[16];
  typedef unsigned long downlink_orbit_id_t;
  typedef unsigned long downlink_segment_id_t;
  typedef unsigned long frequency_t;

  typedef struct downlink_info_t
  {
    satellite_id_t        satellite_id;
    downlink_orbit_id_t   dl_orbit_id;
    downlink_segment_id_t dl_segment_id;

    time_t                time_aos;
    time_str_t            year_aos_str;
    time_str_t            time_aos_str;

    time_t                time_los;
    time_str_t            year_los_str;
    time_str_t            time_los_str;

    frequency_t           frequency;
  } DOWNLINK_INFO_T;



  typedef char data_direction_t[8];

  typedef struct record_info_t
  {
    data_direction_t data_direction;

    time_t           time_record_start;
    time_str_t       year_record_start_str;
    time_str_t       time_record_start_str;

    time_t           time_record_stop;
    time_str_t       year_record_stop_str;
    time_str_t       time_record_stop_str;
  } RECORD_INFO_T;



  typedef char customer_t[16];
  typedef char quicklook_t[4];

  typedef struct customer_info_t
  {
    customer_t  customer1;
    customer_t  customer2;
    quicklook_t quicklook;
  } CUSTOMER_INFO_T;



  typedef unsigned long hc_activity_id_t;

  typedef char software_version_id_t[80];

  typedef struct downlink_perform_info_t
  {
    hc_activity_id_t      hc_activity_id;
    software_version_id_t software_version_id;
    time_t                time_ingested;
    time_t                time_xformed;
    time_t                time_scheduled;
    time_t                time_scheduled_start;
    time_t                time_scheduled_stop;
    time_t                time_worker_start;
    time_t                time_worker_stop;
    time_t                time_reported;
  } DOWNLINK_PERFORM_INFO_T;

  typedef struct dub_perform_info_t
  {
    hc_activity_id_t      hc_activity_id;
    software_version_id_t software_version_id;
    time_t                time_requested;
    time_t                time_queued;
    time_t                time_scheduled;
    time_t                time_scheduled_start;
    time_t                time_scheduled_stop;
    time_t                time_worker_start;
    time_t                time_worker_stop;
    time_t                time_reported;
  } DUB_PERFORM_INFO_T;

  typedef struct perform_info_t
  {
    hc_activity_id_t      hc_activity_id;
    software_version_id_t software_version_id;
    time_t                time_ingested;
    time_t                time_scheduled;
    time_t                time_scheduled_start;
    time_t                time_scheduled_stop;
    time_t                time_worker_start;
    time_t                time_worker_stop;
    time_t                time_reported;
  } PERFORM_INFO_T;



  typedef char antenna_id_t[16];
  typedef char fa_schedule_link_t[12];
  typedef char sensor_t[2];
  typedef char sensor_mode_t[4];

#ifdef real_site_name_size 
  typedef char site_name_t[256];
#else
  typedef char site_name_t[8];
#endif

  typedef struct wos_record_t
  {
    antenna_id_t            antenna_id;
    DOWNLINK_INFO_T         downlink_info;
    RECORD_INFO_T           record_info;
    CUSTOMER_INFO_T         customer_info;
    DOWNLINK_PERFORM_INFO_T performance_info;
    fa_schedule_link_t      fa_schedule_link;
    sensor_t                sensor;
    sensor_mode_t           mode;
    site_name_t             site_name;
  } WOS_RECORD_T;


  typedef char  precision_t[17];
  typedef char  coordinate_system_t[20];
  typedef double vector_component_t;

  typedef struct ephemeris_record_t
  {
    satellite_id_t        satellite_id;
    downlink_orbit_id_t   dl_orbit_id;
    time_t                datetime_time;
    time_str_t            ephemeris_year;
    time_str_t            ephemeris_time;
    precision_t           precision;
    coordinate_system_t   coordinate_system;
    vector_component_t    x_pos;
    vector_component_t    y_pos;
    vector_component_t    z_pos;
    vector_component_t    x_vel;
    vector_component_t    y_vel;
    vector_component_t    z_vel;
  } EPHEMERIS_RECORD_T;



  typedef char media_type_t[16];
  typedef char station_id_t[3];
  typedef char tape_series_t[16];
  typedef long int job_type_modifier_t;

/*** 
 * "priority" must be the first field in the structure because the 
 *            function qsort is being used to sort an array of these
 *            structures.
 ***/
  typedef struct downlink_jit_record_t
  {
    long int      priority; /* This must be the first field in the structure */
    media_type_t  media_type;
    tape_series_t tape_series;
    customer_t    customer;
    WOS_RECORD_T  wos_record;
  } DOWNLINK_JIT_RECORD_T;



  typedef struct dub_jit_record_t
  {
    long temporary_place_holder;
  } DUB_JIT_RECORD_T;

  typedef struct pm_jit_record_t
  {
    long temporary_place_holder;
  } PM_JIT_RECORD_T;

  typedef struct sniff_jit_record_t
  {
    long temporary_place_holder;
  } SNIFF_JIT_RECORD_T;

  typedef struct spool_jit_record_t
  {
    long int dogtag;
    media_type_t media_type;
    boolean AlsoFormat;
  } SPOOL_JIT_RECORD_T;

  typedef struct tape_swap_t
  {
    long temporary_place_holder;
  } TAPE_SWAP_T;

  typedef struct tape_release_t
  {
    time_t              time_release_start;
    time_t              time_release_stop;
    job_type_modifier_t job_type_modifier;
    media_type_t        media_type;
    tape_series_t       tape_series;
    station_id_t        station_id;
  } TAPE_RELEASE_T;



  typedef struct hrs_record_t
  {
    time_t job_start_time;
    time_t job_end_time;

    job_count_t  job_count;
    union job_info_t switch (job_type_t job_type) job
    {
      case DOWNLINK:     DOWNLINK_JIT_RECORD_T downlink_jit;
      case DUB:          DUB_JIT_RECORD_T      dub_jit;
      case PM:           PM_JIT_RECORD_T       pm_jit;
      case SNIFF:        SNIFF_JIT_RECORD_T    sniff_jit;
      case SPOOL:        SPOOL_JIT_RECORD_T    spool_jit;
      case TAPE_SWAP:    TAPE_SWAP_T           tape_swap_jit;
      case TAPE_RELEASE: TAPE_RELEASE_T        tape_release_jit;
    } job_info;
  } HRS_RECORD_T;



  typedef struct ros_record_t
  {
    process_id_t hardware_device;
    HRS_RECORD_T hrs_record;
  } ROS_RECORD_T;

  typedef struct downlink_msg_t
  {
    ROS_RECORD_T      ros_record;
    long int          dogtag;
    tape_id_t         tape_id;
    tape_id_t         tape_alias;
    time_t            actual_start_time;
    time_t            actual_stop_time;
    tape_address_t    start_address;
    tape_address_t    stop_address;
    tape_annotation_t annotation;
    dps2_MatrixState_t analog_state;
    dps2_MatrixState_t digital_state;
  } DOWNLINK_MSG_T;

  typedef [string] char rgs_file_type_t[21];

  typedef struct tracking_ingest_msg_t
  {
    antenna_id_t          antenna;
    satellite_id_t        satellite;
    downlink_orbit_id_t   orbit;
    downlink_segment_id_t segment;
    filename_t            filename;
    rgs_file_type_t       filetype;
  } TRACKING_INGEST_MSG_T;

  typedef enum
  {
    MOUNT,
    DISMOUNT
  } mount_action_t;

  typedef struct tape_available_msg_t
  {
    long int  dogtag;
    tape_id_t tape_id;
    tape_id_t tape_alias;
    tape_series_t tape_series;
    media_type_t media_type;
    mount_action_t action;
  } TAPE_AVAILABLE_MSG_T;

  typedef struct spool_msg_t
  {
    tape_id_t tape_id;
    long int  dogtag;
    media_type_t media_type;
    time_t when;
  } SPOOL_MSG_T;

  typedef enum
  {
    DL_MSG_COUNTER,
    DL_PERF_MSG_COUNTER,
    DLI_MSG_COUNTER,
    DLI_PERF_MSG_COUNTER,
    DUB_MSG_COUNTER,
    DUB_SPEC_MSG_COUNTER,
    DUB_PERF_MSG_COUNTER,
    TA_MSG_COUNTER,
    TRI_MSG_COUNTER,
    TRI_PERF_MSG_COUNTER,
    PM_MSG_COUNTER,
    PM_PERF_MSG_COUNTER,
    SNIFF_MSG_COUNTER,
    SNIFF_PERF_MSG_COUNTER,
    SPOOL_MSG_COUNTER,
    SPOOL_PERF_MSG_COUNTER,
    HC_ACTIVITY_COUNTER,
    __MAX_COUNTERS__
  } counter_t;

  typedef unsigned long int count_t;

  const char* BrokerAnnotation           = "Master Broker";
  const char* BrokerTestAnnotation       = "Master Broker Test Client";

  const char* conductorAnnotation        = "Conductor";
  const char* conductorTestAnnotation    = "Conductor Test Client";

  const char* dcrsiAnnotation            = "DCRSi Device Driver";
  const char* dcrsiTestAnnotation        = "DCRSi Test Client";

  const char* deviceAnnotation           = "Generic Device Driver";
  const char* deviceTestAnnotation       = "Device Test Client";

  const char* DevManAnnotation           = "Device Manager";
  const char* DevManTestAnnotation       = "Device Manager Test Client";

  const char* dlESAnnotation             = "Downlink Event Scheduler";
  const char* dlESTestAnnotation         = "Downlink Event Scheduler Test Client";
  const char* dlDistributeAnnotation     = "Downlink Distribute";
  const char* dlDistributeTestAnnotation = "Downlink Distribute Test Client";

  const char* dlIngestAnnotation         = "Downlink Ingest";
  const char* dlIngestTestAnnotation     = "Downlink Ingest Test Client";

  const char* wosAnnotation              = "WOS Ingest";
  const char* wosTestAnnotation          = "WOS Ingest Test Client";

  const char* ephemerisAnnotation        = "Ephemeris Ingest";
  const char* ephemerisTestAnnotation    = "Ephemeris Ingest Test Client";

  const char* dlJITAnnotation            = "Downlink JIT";
  const char* dlJITTestAnnotation        = "Downlink JIT Test Client";

  const char* aIngestAnnotation          = "Acquisition Ingest";
  const char* aIngestFetchAnnotation     = "Acquisition Ingest Fetch Client";
  const char* aIngestReprocessAnnotation = "Acquisition Ingest Reprocess Client";

  const char* dlVerifyAnnotation         = "Downlink Verify";
  const char* dlVerifyAcceptAnnotation   = "Downlink Verify Accept Client";

  const char* dsDistributeAnnotation     = "Data Stripper Distribute";
  const char* dsDistributeTestAnnotation = "Data Stripper Distribute Test Client";

  const char* aWorkerAnnotation          = "Downlink Tape Worker";
  const char* aWorkerTestAnnotation      = "Downlink Tape Worker Test Client";

  const char* dsWorkerAnnotation         = "Data Stripper Worker";
  const char* dsWorkerTestAnnotation     = "Data Stripper Worker Test Client";
  const char* workerTestAnnotation       = "Worker Test Client";

  const char* dps2Annotation             = "DPS-II Device Driver";
  const char* dps2TestAnnotation         = "DPS-II Test Client";

  const char* eventTestAnnotation        = "Event Test Client";

  const char* GPIBAnnotation             = "GPIB Super Driver";
  const char* GPIBTestAnnotation         = "GPIB Super Driver Test Client";
  const char* HD96Annotation             = "HD-96 Device Driver";
  const char* HD96TestAnnotation         = "HD-96 Test Client";

  const char* HRSAnnotation              = "Hardware Resource Schedule";
  const char* HRSTestAnnotation          = "Hardware Resource Schedule Test Client";

  const char* GopherAnnotation           = "GUI Gopher Relay Server";
  const char* guiAnnotation              = "GUI Gopher";

  const char* killerAnnotation           = "DCE Server Killer";

  const char* ruleKeeperAnnotation       = "Rule Keeper";
  const char* ruleKeeperTestAnnotation   = "Rule Keeper Test Client";

  const char* w2rAnnotation              = "WOS to ROS";

  const char* SonyID1Annotation          = "Sony ID1 Device Driver";
  const char* SonyID1TestAnnotation      = "Sony ID1 Test Client";

  const char* Ant10DistAnnotation        = "10m Distribute";
  const char* Ant10DistTestAnnotation    = "10m Distribute Test Client";

  const char* Ant11DistAnnotation        = "11m Distribute";
  const char* Ant11DistTestAnnotation    = "11m Distribute Test Client";

  const char* Ant10ReptAnnotation        = "10m Reporter";
  const char* Ant11ReptAnnotation        = "11m Reporter";

  const char* SustainingEngineeringTest1 = "Sus Eng Test 1";
  const char* SustainingEngineeringTest2 = "Sus Eng Test 2";
  const char* SustainingEngineeringTest3 = "Sus Eng Test 3";
  const char* SustainingEngineeringTest4 = "Sus Eng Test 4";

  const char* ReporterAnnotation         = "Reporter";
  const char* ReporterTestAnnotation     = "Reporter Test Client";

  const char* tapeManAnnotation		 = "Tape Manager";
  const char* tapeManTestAnnotation	 = "Tape Manager Test Client";

  const char* TCRAnnotation              = "Time Code Reader Device Driver";
  const char* TCRTestAnnotation          = "Time Code Reader Test Client";

  const char* barcodeAnnotation          = "Bar Code Reader Device Driver";
  const char* barcodeTestAnnotation      = "Bar Code Reader Test Client";

  const char* TRESAnnotation             = "Tape Release";
  const char* TRESTestAnnotation         = "Tape Release Test Client";

  const char* TCGAnnotation              = "Time Code Generator Device Driver";
  const char* TCGTestAnnotation          = "Time Code Generator Test Client";
}
