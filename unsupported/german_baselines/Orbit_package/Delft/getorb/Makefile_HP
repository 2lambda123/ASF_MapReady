# Makefile. GETORB. Version 2.0.3. 8 Dec 1996
#
# This Makefile contains the description for the generation and testing
# of 'getorb' and 'lodr', two programs to handle the Delft Orbital Data
# records (ODRs).
#
# As additional applications are provided:
# - getorb: interpolate DUT orbits at requested epoch.
# - lodr  : list contents of DUT orbit files.
#
# Please read the instructions below carefully before installing the
# software. It has been attempted to make the software completely
# platform independent, and so we expect that you can use this Makefile
# without any major change.
#
# 1. After compiling and testing of the software, you may like to put the
#    executable in a 'bin' directory that is in your path.
#    
#BIN_DIR		= /home/altim/bin
BIN_DIR         =${SAR_BIN_DIR}
#
# 2. 'make' is usually able to determine which is your fortran compiler and
#    C compiler. However, if 'make' crashes, because it can't find the
#    compilers, uncomment the next 2 lines and specify the proper compiler
#    names.
#
#FC		= fc
#CC		= cc
CPP		= /lib/cpp -P
#
# 3. Fortran and C compile flags are usually set by make. If you have
#    other preferences, uncomment the next two lines and set them to your
#    prefered values.
#
CFLAGS		=   -O
FFLAGS		=  +U77 -O
#
# 4. This should be all that MIGHT need changing. Now type 'make' to create
#    the programs  'getorb'  and  'lodr'. If this is successful, you may like
#    to test it by running 'make test' and then commit it by typing
#    'make install'.
#    Afterwards, type 'make clean' to remove unnecessary remains.
#
# For any comments on the Makefile, feel free to contact the author.
#
# Remko Scharroo         Remko.Scharroo@lr.tudelft.nl
#
# Delft Institute for Earth-Oriented Space Research
# Delft University of Technology
# Kluyverweg 1, 2629 HS, Delft, The Netherlands
###############################################################################
#
# It shouldn't be necessary to change anything in this part. Nevertheless,
# there's no harm in explaining what it is we are trying to establish here.
#
# A. Define all routines needed to create  'getorb'. Then specify the
#    names of the files that go into the tar.gz file and the executables
#    that are created.
#
OBJS		= carpol.o chrdat.o fastio.o freeunit.o getorb.o geocen.o \
		geoxyz.o i2swap.o i4swap.o intab8.o inter8.o mdate.o \
		odrinfo.o polcar.o sec85.o

SOURCES		= getorb/README* getorb/*.[fFc] getorb/*.inc \
		getorb/Makefile getorb/data getorb/docs
EXECUTABLES	= getorb lodr 
#
# B. Define how to make .o files from .F and .c files. The C preprocessor is
#    run first on the .F files.
#
.SUFFIXES:	.F

.F.o:
		$(CPP) `cat sysinfo` $< > F$*.f
		$(FC) $(FFLAGS) -c F$*.f
		mv F$*.o $@
		rm -f F$*.f

.c.o:
		$(CC) $(CFLAGS) `cat sysinfo` -c $<
#
# C. If you just type 'make' this is equivalent to 'make all' where 'all'
#    means 'getorb lodr'. 'make test' runs lots of tests.
#
all:		$(EXECUTABLES)
test:		getorb_test lodr_test
		@echo "****************************************"
		@echo "*** Congratulations: all tests passed **"
		@echo "****************************************"
#
# D. Create the program syscheck to evaluate which is the integer
#    representation and whether the Fortran compiler appends underscores to the
#    routine and function names.
#
sysinfo:	syscheck
		./syscheck
		-./syscheck | egrep -e -D > sysinfo

syscheck:	underscore.c syscheck.f
		$(CC) -c underscore.c
		$(FC) $(FFLAGS) syscheck.f -o $@ underscore.o ; strip $@
		rm -f underscore.o syscheck.o
#
# E. Some OBJS need includes.
#
getorb.o:	math.inc
#
# F. Now to test the software, type 'make tests'.
# 
getorb_test:	getorb
		@echo "****************************************"
		@echo "*** Testing getorb on ODR.378        ***"
		@echo "****************************************"
		./getorb 950222025000,950222025100,1 data > getorb.out
		diff getorb.out data/getorb.out
		@echo "****************************************"
		@echo "*** Files are identical. Test passed ***"
		@echo "****************************************"
		rm -f getorb.out

lodr_test:	lodr
		@echo "****************************************"
		@echo "*** Testing lodr on ODR.378          ***"
		@echo "****************************************"
		./lodr t=950222.1,950222030000 data/ODR.378 > lodr.out
		diff lodr.out data/lodr.out
		@echo "****************************************"
		@echo "*** Files are identical. Test passed ***"
		@echo "****************************************"
		rm -f lodr.out
#
# G. To install the executables in the 'bin' directory.
#
install:	$(EXECUTABLES)
		chmod 755 $(EXECUTABLES)
		mv $(EXECUTABLES) $(BIN_DIR)
#
# H. If that is finished, cut the crap and type 'make clean'.
#    Or really get rid off all that was needed to make the executables
#    and type 'make spotless'.
#
clean:
		rm -f *.o sysinfo syscheck core
spotless:	clean
		rm -f *.[fFc] *.inc */*.[fFc] 
		rm -rf data
#
# I. We may like to make an archive
#
tar:		getorb.tar.gz
getorb.tar.gz:
		(cd .. ; tar -cvhf - $(SOURCES) | gzip > $@)
#
# J. Finally how to make the getorb library and executables
#
getorb.a:	sysinfo $(OBJS)
		ar rv $@ $(OBJS)
		-ranlib $@
geocen.o:	GRS80.inc
getorb:		getorb.a getorb_main.o
		$(FC) $(FFLAGS) getorb_main.o getorb.a -o $@ ; strip $@
lodr:		getorb.a lodr.o
		$(FC) $(FFLAGS) lodr.o getorb.a -o $@ ; strip $@
